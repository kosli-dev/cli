{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [
      {
        "tool": {
          "driver": {
            "name": "SnykCode",
            "semanticVersion": "1.0.0",
            "version": "1.0.0",
            "rules": [
              {
                "id": "python/OR",
                "name": "OR",
                "shortDescription": {
                  "text": "Open Redirect"
                },
                "defaultConfiguration": {
                  "level": "warning"
                },
                "help": {
                  "markdown": "\n## Details\nAn open redirect attack takes place when a web application redirects the user to an unauthorized and untrusted site. In general, URL redirection refers to the ability of a website or application to redirect users to another site. This is often a benign and useful feature. For example, if a resource has moved to a new location, URL redirection can transfer the user to that location rather than displaying an error message.\nHowever, this ability can be exploited through social engineering, tricking the user into believing they are accessing one site when, in reality, they are being redirected to a dangerous site, such as a phishing site. Once there, the user may be further tricked into entering credentials or personally identifiable information (PII), believing they are still within the original, trusted domain. Attackers can then use these credentials to gain unauthorized access or leverage the user's PII for sale or ransom.\n\n## Best practices for prevention\n* When developing a site or web app, consider implementing a disclaimer page to remind users that they are leaving a secure site.\n* Adopt a zero-trust approach in which all input is treated with suspicion.\n* Validate all input against deny-lists to ensure it does not contain code to redirect the user. This method is good but inherently incomplete.\n* Be aware of all sources of untrusted input being sent to the server that could be used to redirect the user, such as cookies, URL components, filenames, query results, request headers, and more.\n* In particular, be aware of potential API calls that could send input indirectly to redirect the user.\n* To protect end users, use a firewall to block known malicious sites, train users to recognize basic signs of a phishing attack, and ensure that all network endpoints are patched with the most current updates.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "OR",
                    "Security",
                    "SourceServer",
                    "SourceWebForm",
                    "Taint"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/inveniosoftware/invenio/commit/20edecca740c36a80b65678fce66c5d453281dd0?diff=split#diff-a435900ae3a37c2eccbd13c640c6802a13ca9c983c1ed743588001f1cb878fa0L-1",
                      "lines": [
                        {
                          "line": "def get_session_next_url(remote_app):\n",
                          "lineNumber": 42,
                          "lineChange": "added"
                        },
                        {
                          "line": "    return session.get(\n",
                          "lineNumber": 43,
                          "lineChange": "added"
                        },
                        {
                          "line": "        \"%s_%s\" % (token_session_key(remote_app), \"next_url\")\n",
                          "lineNumber": 44,
                          "lineChange": "added"
                        },
                        {
                          "line": "    )\n",
                          "lineNumber": 45,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 46,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 47,
                          "lineChange": "added"
                        },
                        {
                          "line": "def set_session_next_url(remote_app, url):\n",
                          "lineNumber": 48,
                          "lineChange": "added"
                        },
                        {
                          "line": "    session[\"%s_%s\" % (token_session_key(remote_app), \"next_url\")] = \\\n",
                          "lineNumber": 49,
                          "lineChange": "added"
                        },
                        {
                          "line": "        url\n",
                          "lineNumber": 50,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 51,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "added"
                        },
                        {
                          "line": "def token_session_key(remote_app):\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Generate a session key used to store the token for a remote app.\"\"\"\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return '%s_%s' % (cfg['OAUTHCLIENT_SESSION_KEY_PREFIX'], remote_app)\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "def response_token_setter(remote, resp):\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Extract token from response and set it for the user.\"\"\"\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if resp is None:\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise OAuthRejectedRequestError(\"User rejected request.\", remote, resp)\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if 'access_token' in resp:\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return oauth2_token_setter(remote, resp)\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        elif 'oauth_token' in resp and 'oauth_token_secret' in resp:\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return oauth1_token_setter(remote, resp)\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        elif 'error' in resp:\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # Only OAuth2 specifies how to send error messages\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "            raise OAuthClientError(\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "                'Authorization with remote service failed.', remote, resp,\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "            )\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "    raise OAuthResponseError(\"Bad OAuth authorized request\", remote, resp)\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "def oauth1_token_setter(remote, resp, token_type='', extra_data=None):\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Set an OAuth1 token.\"\"\"\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return token_setter(\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        remote,\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "        resp['oauth_token'],\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "        secret=resp['oauth_token_secret'],\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        extra_data=extra_data,\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        token_type=token_type,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "    )\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "def oauth2_token_setter(remote, resp, token_type='', extra_data=None):\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Set an OAuth2 token.\"\"\"\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return token_setter(\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        remote,\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        resp['access_token'],\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "        secret='',\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        token_type=token_type,\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "        extra_data=extra_data,\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "    )\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "def token_setter(remote, token, secret='', token_type='', extra_data=None):\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Set token for user.\"\"\"\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "    session[token_session_key(remote.name)] = (token, secret)\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 100,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Save token if used is authenticated\n",
                          "lineNumber": 101,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if current_user.is_authenticated():\n",
                          "lineNumber": 102,
                          "lineChange": "none"
                        },
                        {
                          "line": "        uid = current_user.get_id()\n",
                          "lineNumber": 103,
                          "lineChange": "none"
                        },
                        {
                          "line": "        cid = remote.consumer_key\n",
                          "lineNumber": 104,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 105,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Check for already existing token\n",
                          "lineNumber": 106,
                          "lineChange": "none"
                        },
                        {
                          "line": "        t = RemoteToken.get(uid, cid, token_type=token_type)\n",
                          "lineNumber": 107,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 108,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if t:\n",
                          "lineNumber": 109,
                          "lineChange": "none"
                        },
                        {
                          "line": "            t.update_token(token, secret)\n",
                          "lineNumber": 110,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 111,
                          "lineChange": "none"
                        },
                        {
                          "line": "            t = RemoteToken.create(\n",
                          "lineNumber": 112,
                          "lineChange": "none"
                        },
                        {
                          "line": "                uid, cid, token, secret,\n",
                          "lineNumber": 113,
                          "lineChange": "none"
                        },
                        {
                          "line": "                token_type=token_type, extra_data=extra_data\n",
                          "lineNumber": 114,
                          "lineChange": "none"
                        },
                        {
                          "line": "            )\n",
                          "lineNumber": 115,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return t\n",
                          "lineNumber": 116,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return None\n",
                          "lineNumber": 117,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 118,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 119,
                          "lineChange": "none"
                        },
                        {
                          "line": "def token_getter(remote, token=''):\n",
                          "lineNumber": 120,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Retrieve OAuth access token.\n",
                          "lineNumber": 121,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 122,
                          "lineChange": "none"
                        },
                        {
                          "line": "    Ued by flask-oauthlib to get the access token when making requests.\n",
                          "lineNumber": 123,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 124,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param token: Type of token to get. Data passed from ``oauth.request()`` to\n",
                          "lineNumber": 125,
                          "lineChange": "none"
                        },
                        {
                          "line": "         identify which token to retrieve.\n",
                          "lineNumber": 126,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 127,
                          "lineChange": "none"
                        },
                        {
                          "line": "    session_key = token_session_key(remote.name)\n",
                          "lineNumber": 128,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 129,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if session_key not in session and current_user.is_authenticated():\n",
                          "lineNumber": 130,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Fetch key from token store if user is authenticated, and the key\n",
                          "lineNumber": 131,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # isn't already cached in the session.\n",
                          "lineNumber": 132,
                          "lineChange": "none"
                        },
                        {
                          "line": "        remote_token = RemoteToken.get(\n",
                          "lineNumber": 133,
                          "lineChange": "none"
                        },
                        {
                          "line": "            current_user.get_id(),\n",
                          "lineNumber": 134,
                          "lineChange": "none"
                        },
                        {
                          "line": "            remote.consumer_key,\n",
                          "lineNumber": 135,
                          "lineChange": "none"
                        },
                        {
                          "line": "            token_type=token,\n",
                          "lineNumber": 136,
                          "lineChange": "none"
                        },
                        {
                          "line": "        )\n",
                          "lineNumber": 137,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 138,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if remote_token is None:\n",
                          "lineNumber": 139,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 140,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 141,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Store token and secret in session\n",
                          "lineNumber": 142,
                          "lineChange": "none"
                        },
                        {
                          "line": "        session[session_key] = remote_token.token()\n",
                          "lineNumber": 143,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 144,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return session.get(session_key, None)\n",
                          "lineNumber": 145,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 146,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 147,
                          "lineChange": "none"
                        },
                        {
                          "line": "def token_delete(remote, token=''):\n",
                          "lineNumber": 148,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Remove OAuth access tokens from session.\"\"\"\n",
                          "lineNumber": 149,
                          "lineChange": "none"
                        },
                        {
                          "line": "    session_key = token_session_key(remote.name)\n",
                          "lineNumber": 150,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return session.pop(session_key, None)\n",
                          "lineNumber": 151,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 152,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 153,
                          "lineChange": "none"
                        },
                        {
                          "line": "#\n",
                          "lineNumber": 154,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Error handling decorators\n",
                          "lineNumber": 155,
                          "lineChange": "none"
                        },
                        {
                          "line": "#\n",
                          "lineNumber": 156,
                          "lineChange": "none"
                        },
                        {
                          "line": "def oauth_error_handler(f):\n",
                          "lineNumber": 157,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Decorator to handle exceptions.\"\"\"\n",
                          "lineNumber": 158,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @wraps(f)\n",
                          "lineNumber": 159,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def inner(*args, **kwargs):\n",
                          "lineNumber": 160,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # OAuthErrors should not happen, so they are not caught here. Hence\n",
                          "lineNumber": 161,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # they will result in a 500 Internal Server Error which is what we\n",
                          "lineNumber": 162,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # are interested in.\n",
                          "lineNumber": 163,
                          "lineChange": "none"
                        },
                        {
                          "line": "        try:\n",
                          "lineNumber": 164,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return f(*args, **kwargs)\n",
                          "lineNumber": 165,
                          "lineChange": "none"
                        },
                        {
                          "line": "        except OAuthClientError as e:\n",
                          "lineNumber": 166,
                          "lineChange": "none"
                        },
                        {
                          "line": "            current_app.logger.warning(e.message, exc_info=True)\n",
                          "lineNumber": 167,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return oauth2_handle_error(\n",
                          "lineNumber": 168,
                          "lineChange": "none"
                        },
                        {
                          "line": "                e.remote, e.response, e.code, e.uri, e.description\n",
                          "lineNumber": 169,
                          "lineChange": "none"
                        },
                        {
                          "line": "            )\n",
                          "lineNumber": 170,
                          "lineChange": "none"
                        },
                        {
                          "line": "        except OAuthRejectedRequestError:\n",
                          "lineNumber": 171,
                          "lineChange": "none"
                        },
                        {
                          "line": "            flash(\"You rejected the authentication request.\")\n",
                          "lineNumber": 172,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect('/')\n",
                          "lineNumber": 173,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return inner\n",
                          "lineNumber": 174,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 175,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 176,
                          "lineChange": "none"
                        },
                        {
                          "line": "#\n",
                          "lineNumber": 177,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Handlers\n",
                          "lineNumber": 178,
                          "lineChange": "none"
                        },
                        {
                          "line": "#\n",
                          "lineNumber": 179,
                          "lineChange": "none"
                        },
                        {
                          "line": "@oauth_error_handler\n",
                          "lineNumber": 180,
                          "lineChange": "none"
                        },
                        {
                          "line": "def authorized_default_handler(resp, remote, *args, **kwargs):\n",
                          "lineNumber": 181,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Store access token in session.\n",
                          "lineNumber": 182,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 183,
                          "lineChange": "none"
                        },
                        {
                          "line": "    Default authorized handler.\n",
                          "lineNumber": 184,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 185,
                          "lineChange": "none"
                        },
                        {
                          "line": "    response_token_setter(remote, resp)\n",
                          "lineNumber": 186,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return redirect('/')\n",
                          "lineNumber": 187,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 188,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 189,
                          "lineChange": "none"
                        },
                        {
                          "line": "@oauth_error_handler\n",
                          "lineNumber": 190,
                          "lineChange": "none"
                        },
                        {
                          "line": "def authorized_signup_handler(resp, remote, *args, **kwargs):\n",
                          "lineNumber": 191,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Handle sign-in/up functionality.\"\"\"\n",
                          "lineNumber": 192,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Remove any previously stored auto register session key\n",
                          "lineNumber": 193,
                          "lineChange": "none"
                        },
                        {
                          "line": "    session.pop(token_session_key(remote.name) + '_autoregister', None)\n",
                          "lineNumber": 194,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 195,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Store token in session\n",
                          "lineNumber": 196,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # ----------------------\n",
                          "lineNumber": 197,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Set token in session - token object only returned if\n",
                          "lineNumber": 198,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # current_user.is_autenticated().\n",
                          "lineNumber": 199,
                          "lineChange": "none"
                        },
                        {
                          "line": "    token = response_token_setter(remote, resp)\n",
                          "lineNumber": 200,
                          "lineChange": "none"
                        },
                        {
                          "line": "    handlers = signup_handlers[remote.name]\n",
                          "lineNumber": 201,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 202,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Sign-in/up user\n",
                          "lineNumber": 203,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # ---------------\n",
                          "lineNumber": 204,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not current_user.is_authenticated():\n",
                          "lineNumber": 205,
                          "lineChange": "none"
                        },
                        {
                          "line": "        account_info = handlers['info'](resp)\n",
                          "lineNumber": 206,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 207,
                          "lineChange": "none"
                        },
                        {
                          "line": "        user = oauth_get_user(\n",
                          "lineNumber": 208,
                          "lineChange": "none"
                        },
                        {
                          "line": "            remote.consumer_key,\n",
                          "lineNumber": 209,
                          "lineChange": "none"
                        },
                        {
                          "line": "            account_info=account_info,\n",
                          "lineNumber": 210,
                          "lineChange": "none"
                        },
                        {
                          "line": "            access_token=token_getter(remote)[0],\n",
                          "lineNumber": 211,
                          "lineChange": "none"
                        },
                        {
                          "line": "        )\n",
                          "lineNumber": 212,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 213,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if user is None:\n",
                          "lineNumber": 214,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # Auto sign-up if user not found\n",
                          "lineNumber": 215,
                          "lineChange": "none"
                        },
                        {
                          "line": "            user = oauth_register(account_info)\n",
                          "lineNumber": 216,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if user is None:\n",
                          "lineNumber": 217,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # Auto sign-up requires extra information\n",
                          "lineNumber": 218,
                          "lineChange": "none"
                        },
                        {
                          "line": "                session[\n",
                          "lineNumber": 219,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    token_session_key(remote.name) + '_autoregister'] = True\n",
                          "lineNumber": 220,
                          "lineChange": "none"
                        },
                        {
                          "line": "                session[token_session_key(remote.name) +\n",
                          "lineNumber": 221,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        \"_account_info\"] = account_info\n",
                          "lineNumber": 222,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return redirect(url_for(\n",
                          "lineNumber": 223,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    \".signup\",\n",
                          "lineNumber": 224,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    remote_app=remote.name,\n",
                          "lineNumber": 225,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    next=request.args.get('next', '/')\n",
                          "lineNumber": 215,
                          "lineChange": "none"
                        },
                        {
                          "line": "                ))\n",
                          "lineNumber": 226,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 227,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Authenticate user\n",
                          "lineNumber": 228,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not oauth_authenticate(remote.consumer_key, user,\n",
                          "lineNumber": 229,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                  require_existing_link=False,\n",
                          "lineNumber": 230,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                  remember=cfg['OAUTHCLIENT_REMOTE_APPS']\n",
                          "lineNumber": 231,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                  [remote.name].get('remember', False)):\n",
                          "lineNumber": 232,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return current_app.login_manager.unauthorized()\n",
                          "lineNumber": 233,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 234,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Link account\n",
                          "lineNumber": 235,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # ------------\n",
                          "lineNumber": 236,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Need to store token in database instead of only the session when\n",
                          "lineNumber": 237,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # called first time.\n",
                          "lineNumber": 238,
                          "lineChange": "none"
                        },
                        {
                          "line": "        token = response_token_setter(remote, resp)\n",
                          "lineNumber": 239,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 240,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Setup account\n",
                          "lineNumber": 241,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # -------------\n",
                          "lineNumber": 242,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not token.remote_account.extra_data and \\\n",
                          "lineNumber": 243,
                          "lineChange": "none"
                        },
                        {
                          "line": "       remote.name in signup_handlers:\n",
                          "lineNumber": 244,
                          "lineChange": "none"
                        },
                        {
                          "line": "        handlers['setup'](token)\n",
                          "lineNumber": 245,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 246,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Redirect to next\n",
                          "lineNumber": 247,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if request.args.get('next', None):\n",
                          "lineNumber": 238,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        return redirect(request.args.get('next'))\n",
                          "lineNumber": 239,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    next_url = get_session_next_url(remote.name)\n",
                          "lineNumber": 248,
                          "lineChange": "added"
                        },
                        {
                          "line": "    if next_url:\n",
                          "lineNumber": 249,
                          "lineChange": "added"
                        },
                        {
                          "line": "        return redirect(next_url)\n",
                          "lineNumber": 250,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/flask-admin/flask-admin/commit/4ec6473a720fc01a35ee4314cd41540f842fbf09?diff=split#diff-81459308eab181f696582f7b64e36fb5616b7106eeeae2d2284535d632106789L-1",
                      "lines": [
                        {
                          "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit\n",
                          "lineNumber": 13,
                          "lineChange": "removed"
                        },
                        {
                          "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit, get_redirect_target\n",
                          "lineNumber": 13,
                          "lineChange": "added"
                        },
                        {
                          "line": "from flask.ext.admin.tools import rec_getattr\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "from flask.ext.admin._backwards import ObsoleteAttr\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "from flask.ext.admin._compat import iteritems, as_unicode\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "from .helpers import prettify_name, get_mdict_item_or_list\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "from .ajax import AjaxModelLoader\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "try:\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "    from collections import OrderedDict\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "except ImportError:\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Bare-bones OrderedDict implementation for Python2.6 compatibility\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "    class OrderedDict(dict):\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def __init__(self, *args, **kwargs):\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "            dict.__init__(self, *args, **kwargs)\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.ordered_keys = []\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def __setitem__(self, key, value):\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.ordered_keys.append(key)\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "            dict.__setitem__(self, key, value)\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def __iter__(self):\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return (k for k in self.ordered_keys)\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def iteritems(self):\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return ((k, self[k]) for k in self.ordered_keys)\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def items(self):\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return list(self.iteritems())\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "class BaseModelView(BaseView, ActionsMixin):\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Base model view.\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "        This view does not make any assumptions on how models are stored or managed, but expects the following:\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "            1. The provided model is an object\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "            2. The model contains properties\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "            3. Each model contains an attribute which uniquely identifies it (i.e. a primary key for a database model)\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "            4. It is possible to retrieve a list of sorted models with pagination applied from a data source\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "            5. You can get one model by its identifier from the data source\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Essentially, if you want to support a new data store, all you have to do is:\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "            1. Derive from the `BaseModelView` class\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "            2. Implement various data-related methods (`get_list`, `get_one`, `create_model`, etc)\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "            3. Implement automatic form generation from the model representation (`scaffold_form`)\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Permissions\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    can_create = True\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Is model creation allowed\"\"\"\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "    can_edit = True\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Is model editing allowed\"\"\"\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "    can_delete = True\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Is model deletion allowed\"\"\"\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Templates\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    list_template = 'admin/model/list.html'\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Default list view template\"\"\"\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "    edit_template = 'admin/model/edit.html'\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Default edit template\"\"\"\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_template = 'admin/model/create.html'\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Default create template\"\"\"\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Customizations\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_list = ObsoleteAttr('column_list', 'list_columns', None)\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the model field names for the list view.\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If set to `None`, will get them from the model.\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_list = ('name', 'last_name', 'email')\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_exclude_list = ObsoleteAttr('column_exclude_list',\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                       'excluded_list_columns', None)\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of excluded list column names.\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_exclude_list = ('last_name', 'email')\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 100,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_formatters = ObsoleteAttr('column_formatters', 'list_formatters', dict())\n",
                          "lineNumber": 101,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 102,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of list view column formatters.\n",
                          "lineNumber": 103,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 104,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example, if you want to show price multiplied by\n",
                          "lineNumber": 105,
                          "lineChange": "none"
                        },
                        {
                          "line": "        two, you can do something like this::\n",
                          "lineNumber": 106,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 107,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 108,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_formatters = dict(price=lambda v, c, m, p: m.price*2)\n",
                          "lineNumber": 109,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 110,
                          "lineChange": "none"
                        },
                        {
                          "line": "        or using Jinja2 `macro` in template::\n",
                          "lineNumber": 111,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 112,
                          "lineChange": "none"
                        },
                        {
                          "line": "            from flask.ext.admin.model.template import macro\n",
                          "lineNumber": 113,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 114,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 115,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_formatters = dict(price=macro('render_price'))\n",
                          "lineNumber": 116,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 117,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # in template\n",
                          "lineNumber": 118,
                          "lineChange": "none"
                        },
                        {
                          "line": "            {% macro render_price(model, column) %}\n",
                          "lineNumber": 119,
                          "lineChange": "none"
                        },
                        {
                          "line": "                {{ model.price * 2 }}\n",
                          "lineNumber": 120,
                          "lineChange": "none"
                        },
                        {
                          "line": "            {% endmacro %}\n",
                          "lineNumber": 121,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 122,
                          "lineChange": "none"
                        },
                        {
                          "line": "        The Callback function has the prototype::\n",
                          "lineNumber": 123,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 124,
                          "lineChange": "none"
                        },
                        {
                          "line": "            def formatter(view, context, model, name):\n",
                          "lineNumber": 125,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `view` is current administrative view\n",
                          "lineNumber": 126,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `context` is instance of jinja2.runtime.Context\n",
                          "lineNumber": 127,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `model` is model instance\n",
                          "lineNumber": 128,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `name` is property name\n",
                          "lineNumber": 129,
                          "lineChange": "none"
                        },
                        {
                          "line": "                pass\n",
                          "lineNumber": 130,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 131,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 132,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_type_formatters = ObsoleteAttr('column_type_formatters', 'list_type_formatters', None)\n",
                          "lineNumber": 133,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 134,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of value type formatters to be used in the list view.\n",
                          "lineNumber": 135,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 136,
                          "lineChange": "none"
                        },
                        {
                          "line": "        By default, two types are formatted:\n",
                          "lineNumber": 137,
                          "lineChange": "none"
                        },
                        {
                          "line": "        1. ``None`` will be displayed as an empty string\n",
                          "lineNumber": 138,
                          "lineChange": "none"
                        },
                        {
                          "line": "        2. ``bool`` will be displayed as a checkmark if it is ``True``\n",
                          "lineNumber": 139,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 140,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you don't like the default behavior and don't want any type formatters\n",
                          "lineNumber": 141,
                          "lineChange": "none"
                        },
                        {
                          "line": "        applied, just override this property with an empty dictionary::\n",
                          "lineNumber": 142,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 143,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 144,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_type_formatters = dict()\n",
                          "lineNumber": 145,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 146,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you want to display `NULL` instead of an empty string, you can do\n",
                          "lineNumber": 147,
                          "lineChange": "none"
                        },
                        {
                          "line": "        something like this::\n",
                          "lineNumber": 148,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 149,
                          "lineChange": "none"
                        },
                        {
                          "line": "            from flask.ext.admin.model import typefmt\n",
                          "lineNumber": 150,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 151,
                          "lineChange": "none"
                        },
                        {
                          "line": "            MY_DEFAULT_FORMATTERS = dict(typefmt.BASE_FORMATTERS)\n",
                          "lineNumber": 152,
                          "lineChange": "none"
                        },
                        {
                          "line": "            MY_DEFAULT_FORMATTERS.update({\n",
                          "lineNumber": 153,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    type(None): typefmt.null_formatter\n",
                          "lineNumber": 154,
                          "lineChange": "none"
                        },
                        {
                          "line": "                })\n",
                          "lineNumber": 155,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 156,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 157,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_type_formatters = MY_DEFAULT_FORMATTERS\n",
                          "lineNumber": 158,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 159,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Type formatters have lower priority than list column formatters.\n",
                          "lineNumber": 160,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 161,
                          "lineChange": "none"
                        },
                        {
                          "line": "        The callback function has following prototype::\n",
                          "lineNumber": 162,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 163,
                          "lineChange": "none"
                        },
                        {
                          "line": "            def type_formatter(view, value):\n",
                          "lineNumber": 164,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `view` is current administrative view\n",
                          "lineNumber": 165,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `value` value to format\n",
                          "lineNumber": 166,
                          "lineChange": "none"
                        },
                        {
                          "line": "                pass\n",
                          "lineNumber": 167,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 168,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 169,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_labels = ObsoleteAttr('column_labels', 'rename_columns', None)\n",
                          "lineNumber": 170,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 171,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary where key is column name and value is string to display.\n",
                          "lineNumber": 172,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 173,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 174,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 175,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 176,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_labels = dict(name='Name', last_name='Last Name')\n",
                          "lineNumber": 177,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 178,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 179,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_descriptions = None\n",
                          "lineNumber": 180,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 181,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary where key is column name and\n",
                          "lineNumber": 182,
                          "lineChange": "none"
                        },
                        {
                          "line": "        value is description for `list view` column or add/edit form field.\n",
                          "lineNumber": 183,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 184,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 185,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 186,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 187,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_descriptions = dict(\n",
                          "lineNumber": 188,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    full_name='First and Last name'\n",
                          "lineNumber": 189,
                          "lineChange": "none"
                        },
                        {
                          "line": "                )\n",
                          "lineNumber": 190,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 191,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 192,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_sortable_list = ObsoleteAttr('column_sortable_list',\n",
                          "lineNumber": 193,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                        'sortable_columns',\n",
                          "lineNumber": 194,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                        None)\n",
                          "lineNumber": 195,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 196,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the sortable columns for the list view.\n",
                          "lineNumber": 197,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If set to `None`, will get them from the model.\n",
                          "lineNumber": 198,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 199,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 200,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 201,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 202,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_sortable_list = ('name', 'last_name')\n",
                          "lineNumber": 203,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 204,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you want to explicitly specify field/column to be used while\n",
                          "lineNumber": 205,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sorting, you can use a tuple::\n",
                          "lineNumber": 206,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 207,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 208,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_sortable_list = ('name', ('user', 'user.username'))\n",
                          "lineNumber": 209,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 210,
                          "lineChange": "none"
                        },
                        {
                          "line": "        When using SQLAlchemy models, model attributes can be used instead\n",
                          "lineNumber": 211,
                          "lineChange": "none"
                        },
                        {
                          "line": "        of strings::\n",
                          "lineNumber": 212,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 213,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 214,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_sortable_list = ('name', ('user', User.username))\n",
                          "lineNumber": 215,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 216,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 217,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_default_sort = None\n",
                          "lineNumber": 218,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 219,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Default sort column if no sorting is applied.\n",
                          "lineNumber": 220,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 221,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 222,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 223,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 224,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_default_sort = 'user'\n",
                          "lineNumber": 225,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 226,
                          "lineChange": "none"
                        },
                        {
                          "line": "        You can use tuple to control ascending descending order. In following example, items\n",
                          "lineNumber": 227,
                          "lineChange": "none"
                        },
                        {
                          "line": "        will be sorted in descending order::\n",
                          "lineNumber": 228,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 229,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 230,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_default_sort = ('user', True)\n",
                          "lineNumber": 231,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 232,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 233,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_searchable_list = ObsoleteAttr('column_searchable_list',\n",
                          "lineNumber": 234,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          'searchable_columns',\n",
                          "lineNumber": 235,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          None)\n",
                          "lineNumber": 236,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 237,
                          "lineChange": "none"
                        },
                        {
                          "line": "        A collection of the searchable columns. It is assumed that only\n",
                          "lineNumber": 238,
                          "lineChange": "none"
                        },
                        {
                          "line": "        text-only fields are searchable, but it is up to the model\n",
                          "lineNumber": 239,
                          "lineChange": "none"
                        },
                        {
                          "line": "        implementation to decide.\n",
                          "lineNumber": 240,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 241,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 242,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 243,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 244,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_searchable_list = ('name', 'email')\n",
                          "lineNumber": 245,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 246,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 247,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_choices = None\n",
                          "lineNumber": 248,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 249,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Map choices to columns in list view\n",
                          "lineNumber": 250,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 251,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 252,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 253,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 254,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_choices = {\n",
                          "lineNumber": 255,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'my_column': [\n",
                          "lineNumber": 256,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        ('db_value', 'display_value'),\n",
                          "lineNumber": 257,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    ]\n",
                          "lineNumber": 258,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 259,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 260,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 261,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_filters = None\n",
                          "lineNumber": 262,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 263,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the column filters.\n",
                          "lineNumber": 264,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 265,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Can contain either field names or instances of :class:`~flask.ext.admin.model.filters.BaseFilter` classes.\n",
                          "lineNumber": 266,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 267,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 268,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 269,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 270,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_filters = ('user', 'email')\n",
                          "lineNumber": 271,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 272,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \n",
                          "lineNumber": 273,
                          "lineChange": "none"
                        },
                        {
                          "line": "    named_filter_urls = False\n",
                          "lineNumber": 274,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 275,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Set to True to use human-readable names for filters in URL parameters.\n",
                          "lineNumber": 276,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 277,
                          "lineChange": "none"
                        },
                        {
                          "line": "        False by default so as to be robust across translations.\n",
                          "lineNumber": 278,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 279,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Changing this parameter will break any existing URLs.\n",
                          "lineNumber": 280,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 281,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Override unique_filter_label() if you want to change the default format\n",
                          "lineNumber": 282,
                          "lineChange": "none"
                        },
                        {
                          "line": "        of filter urls. This parameter only controls the default method.\n",
                          "lineNumber": 283,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 284,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 285,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_display_pk = ObsoleteAttr('column_display_pk',\n",
                          "lineNumber": 286,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                     'list_display_pk',\n",
                          "lineNumber": 287,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                     False)\n",
                          "lineNumber": 288,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 289,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Controls if the primary key should be displayed in the list view.\n",
                          "lineNumber": 290,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 291,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 292,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form = None\n",
                          "lineNumber": 293,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 294,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Form class. Override if you want to use custom form for your model.\n",
                          "lineNumber": 295,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Will completely disable form scaffolding functionality.\n",
                          "lineNumber": 296,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 297,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 298,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 299,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyForm(Form):\n",
                          "lineNumber": 300,
                          "lineChange": "none"
                        },
                        {
                          "line": "                name = TextField('Name')\n",
                          "lineNumber": 301,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 302,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 303,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form = MyForm\n",
                          "lineNumber": 304,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 305,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 306,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_base_class = BaseForm\n",
                          "lineNumber": 307,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 308,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Base form class. Will be used by form scaffolding function when creating model form.\n",
                          "lineNumber": 309,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 310,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Useful if you want to have custom contructor or override some fields.\n",
                          "lineNumber": 311,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 312,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 313,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 314,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyBaseForm(Form):\n",
                          "lineNumber": 315,
                          "lineChange": "none"
                        },
                        {
                          "line": "                def do_something(self):\n",
                          "lineNumber": 316,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    pass\n",
                          "lineNumber": 317,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 318,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 319,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_base_class = MyBaseForm\n",
                          "lineNumber": 320,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 321,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 322,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 323,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_args = None\n",
                          "lineNumber": 324,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 325,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of form field arguments. Refer to WTForms documentation for\n",
                          "lineNumber": 326,
                          "lineChange": "none"
                        },
                        {
                          "line": "        list of possible options.\n",
                          "lineNumber": 327,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 328,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 329,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 330,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 331,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_args = dict(\n",
                          "lineNumber": 332,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    name=dict(label='First Name', validators=[required()])\n",
                          "lineNumber": 333,
                          "lineChange": "none"
                        },
                        {
                          "line": "                )\n",
                          "lineNumber": 334,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 335,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 336,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_columns = None\n",
                          "lineNumber": 337,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 338,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the model field names for the form. If set to `None` will\n",
                          "lineNumber": 339,
                          "lineChange": "none"
                        },
                        {
                          "line": "        get them from the model.\n",
                          "lineNumber": 340,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 341,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 342,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 343,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 344,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_columns = ('name', 'email')\n",
                          "lineNumber": 345,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 346,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 347,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_excluded_columns = ObsoleteAttr('form_excluded_columns',\n",
                          "lineNumber": 348,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                         'excluded_form_columns',\n",
                          "lineNumber": 349,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                         None)\n",
                          "lineNumber": 350,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 351,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of excluded form field names.\n",
                          "lineNumber": 352,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 353,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 354,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 355,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 356,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_excluded_columns = ('last_name', 'email')\n",
                          "lineNumber": 357,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 358,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 359,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_overrides = None\n",
                          "lineNumber": 360,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 361,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of form column overrides.\n",
                          "lineNumber": 362,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 363,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 364,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 365,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 366,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_overrides = dict(name=wtf.FileField)\n",
                          "lineNumber": 367,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 368,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 369,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_widget_args = None\n",
                          "lineNumber": 370,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 371,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of form widget rendering arguments.\n",
                          "lineNumber": 372,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Use this to customize how widget is rendered without using custom template.\n",
                          "lineNumber": 373,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 374,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 375,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 376,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 377,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_widget_args = {\n",
                          "lineNumber": 378,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'description': {\n",
                          "lineNumber": 379,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'rows': 10,\n",
                          "lineNumber": 380,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'style': 'color: black'\n",
                          "lineNumber": 381,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    }\n",
                          "lineNumber": 382,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 383,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 384,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 385,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_extra_fields = None\n",
                          "lineNumber": 386,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 387,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of additional fields.\n",
                          "lineNumber": 388,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 389,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 390,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 391,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 392,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_extra_fields = {\n",
                          "lineNumber": 393,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    password: PasswordField('Password')\n",
                          "lineNumber": 394,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 395,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 396,
                          "lineChange": "none"
                        },
                        {
                          "line": "        You can control order of form fields using ``form_columns`` property. For example::\n",
                          "lineNumber": 397,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 398,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 399,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_columns = ('name', 'email', 'password', 'secret')\n",
                          "lineNumber": 400,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 401,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_extra_fields = {\n",
                          "lineNumber": 402,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    password: PasswordField('Password')\n",
                          "lineNumber": 403,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 404,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 405,
                          "lineChange": "none"
                        },
                        {
                          "line": "        In this case, password field will be put between email and secret fields that are autogenerated.\n",
                          "lineNumber": 406,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 407,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 408,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_ajax_refs = None\n",
                          "lineNumber": 409,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 410,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Use AJAX for foreign key model loading.\n",
                          "lineNumber": 411,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 412,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Should contain dictionary, where key is field name and value is either a dictionary which\n",
                          "lineNumber": 413,
                          "lineChange": "none"
                        },
                        {
                          "line": "        configures AJAX lookups or backend-specific `AjaxModelLoader` class instance.\n",
                          "lineNumber": 414,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 415,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example, it can look like::\n",
                          "lineNumber": 416,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 417,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 418,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_ajax_refs = {\n",
                          "lineNumber": 419,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'user': {\n",
                          "lineNumber": 420,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'fields': ('first_name', 'last_name', 'email')\n",
                          "lineNumber": 421,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'page_size': 10\n",
                          "lineNumber": 422,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    }\n",
                          "lineNumber": 423,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 424,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 425,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Or with SQLAlchemy backend like this::\n",
                          "lineNumber": 426,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 427,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 428,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_ajax_refs = {\n",
                          "lineNumber": 429,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'user': QueryAjaxModelLoader('user', db.session, User, fields=['email'], page_size=10)\n",
                          "lineNumber": 430,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 431,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 432,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you need custom loading functionality, you can implement your custom loading behavior\n",
                          "lineNumber": 433,
                          "lineChange": "none"
                        },
                        {
                          "line": "        in your `AjaxModelLoader` class.\n",
                          "lineNumber": 434,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 435,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 436,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_rules = None\n",
                          "lineNumber": 437,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 438,
                          "lineChange": "none"
                        },
                        {
                          "line": "        List of rendering rules for model creation form.\n",
                          "lineNumber": 439,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 440,
                          "lineChange": "none"
                        },
                        {
                          "line": "        This property changed default form rendering behavior and makes possible to rearrange order\n",
                          "lineNumber": 441,
                          "lineChange": "none"
                        },
                        {
                          "line": "        of rendered fields, add some text between fields, group them, etc. If not set, will use\n",
                          "lineNumber": 442,
                          "lineChange": "none"
                        },
                        {
                          "line": "        default Flask-Admin form rendering logic.\n",
                          "lineNumber": 443,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 444,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Here's simple example which illustrates how to use::\n",
                          "lineNumber": 445,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 446,
                          "lineChange": "none"
                        },
                        {
                          "line": "            from flask.ext.admin.form import rules\n",
                          "lineNumber": 447,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 448,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(ModelView):\n",
                          "lineNumber": 449,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_rules = [\n",
                          "lineNumber": 450,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # Define field set with header text and four fields\n",
                          "lineNumber": 451,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.FieldSet(('first_name', 'last_name', 'email', 'phone'), 'User'),\n",
                          "lineNumber": 452,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # ... and it is just shortcut for:\n",
                          "lineNumber": 453,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Header('User'),\n",
                          "lineNumber": 454,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Field('first_name'),\n",
                          "lineNumber": 455,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Field('last_name'),\n",
                          "lineNumber": 456,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # ...\n",
                          "lineNumber": 457,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # It is possible to create custom rule blocks:\n",
                          "lineNumber": 458,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    MyBlock('Hello World'),\n",
                          "lineNumber": 459,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # It is possible to call macros from current context\n",
                          "lineNumber": 460,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Macro('my_macro', foobar='baz')\n",
                          "lineNumber": 461,
                          "lineChange": "none"
                        },
                        {
                          "line": "                ]\n",
                          "lineNumber": 462,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 463,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 464,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_edit_rules = None\n",
                          "lineNumber": 465,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 466,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Customized rules for the edit form. Override `form_rules` if present.\n",
                          "lineNumber": 467,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 468,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 469,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_create_rules = None\n",
                          "lineNumber": 470,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 471,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Customized rules for the create form. Override `form_rules` if present.\n",
                          "lineNumber": 472,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 473,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 474,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Actions\n",
                          "lineNumber": 475,
                          "lineChange": "none"
                        },
                        {
                          "line": "    action_disallowed_list = ObsoleteAttr('action_disallowed_list',\n",
                          "lineNumber": 476,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          'disallowed_actions',\n",
                          "lineNumber": 477,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          [])\n",
                          "lineNumber": 478,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 479,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Set of disallowed action names. For example, if you want to disable\n",
                          "lineNumber": 480,
                          "lineChange": "none"
                        },
                        {
                          "line": "        mass model deletion, do something like this:\n",
                          "lineNumber": 481,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 482,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 483,
                          "lineChange": "none"
                        },
                        {
                          "line": "                action_disallowed_list = ['delete']\n",
                          "lineNumber": 484,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 485,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 486,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Various settings\n",
                          "lineNumber": 487,
                          "lineChange": "none"
                        },
                        {
                          "line": "    page_size = 20\n",
                          "lineNumber": 488,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 489,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Default page size for pagination.\n",
                          "lineNumber": 490,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 491,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 492,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def __init__(self, model,\n",
                          "lineNumber": 493,
                          "lineChange": "none"
                        },
                        {
                          "line": "                 name=None, category=None, endpoint=None, url=None):\n",
                          "lineNumber": 494,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 495,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Constructor.\n",
                          "lineNumber": 496,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 497,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 498,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model class\n",
                          "lineNumber": 499,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 500,
                          "lineChange": "none"
                        },
                        {
                          "line": "                View name. If not provided, will use the model class name\n",
                          "lineNumber": 501,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param category:\n",
                          "lineNumber": 502,
                          "lineChange": "none"
                        },
                        {
                          "line": "                View category\n",
                          "lineNumber": 503,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param endpoint:\n",
                          "lineNumber": 504,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Base endpoint. If not provided, will use the model name + 'view'.\n",
                          "lineNumber": 505,
                          "lineChange": "none"
                        },
                        {
                          "line": "                For example if model name was 'User', endpoint will be\n",
                          "lineNumber": 506,
                          "lineChange": "none"
                        },
                        {
                          "line": "                'userview'\n",
                          "lineNumber": 507,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param url:\n",
                          "lineNumber": 508,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Base URL. If not provided, will use endpoint as a URL.\n",
                          "lineNumber": 509,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param debug:\n",
                          "lineNumber": 510,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Enable debugging mode. Won't catch exceptions on model\n",
                          "lineNumber": 511,
                          "lineChange": "none"
                        },
                        {
                          "line": "                save failures.\n",
                          "lineNumber": 512,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 513,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 514,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # If name not provided, it is model name\n",
                          "lineNumber": 515,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if name is None:\n",
                          "lineNumber": 516,
                          "lineChange": "none"
                        },
                        {
                          "line": "            name = '%s' % self._prettify_class_name(model.__name__)\n",
                          "lineNumber": 517,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 518,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # If endpoint not provided, it is model name + 'view'\n",
                          "lineNumber": 519,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if endpoint is None:\n",
                          "lineNumber": 520,
                          "lineChange": "none"
                        },
                        {
                          "line": "            endpoint = ('%sview' % model.__name__).lower()\n",
                          "lineNumber": 521,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 522,
                          "lineChange": "none"
                        },
                        {
                          "line": "        super(BaseModelView, self).__init__(name, category, endpoint, url)\n",
                          "lineNumber": 523,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 524,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.model = model\n",
                          "lineNumber": 525,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 526,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Actions\n",
                          "lineNumber": 527,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.init_actions()\n",
                          "lineNumber": 528,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 529,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Scaffolding\n",
                          "lineNumber": 530,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._refresh_cache()\n",
                          "lineNumber": 531,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 532,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Caching\n",
                          "lineNumber": 533,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _refresh_cache(self):\n",
                          "lineNumber": 534,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 535,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Refresh various cached variables.\n",
                          "lineNumber": 536,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 537,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # List view\n",
                          "lineNumber": 538,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._list_columns = self.get_list_columns()\n",
                          "lineNumber": 539,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._sortable_columns = self.get_sortable_columns()\n",
                          "lineNumber": 540,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 541,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Labels\n",
                          "lineNumber": 542,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_labels is None:\n",
                          "lineNumber": 543,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_labels = {}\n",
                          "lineNumber": 544,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 545,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Forms\n",
                          "lineNumber": 546,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._form_ajax_refs = self._process_ajax_references()\n",
                          "lineNumber": 547,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 548,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_widget_args is None:\n",
                          "lineNumber": 549,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.form_widget_args = {}\n",
                          "lineNumber": 550,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 551,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._create_form_class = self.get_create_form()\n",
                          "lineNumber": 552,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._edit_form_class = self.get_edit_form()\n",
                          "lineNumber": 553,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 554,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Search\n",
                          "lineNumber": 555,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._search_supported = self.init_search()\n",
                          "lineNumber": 556,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 557,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Choices\n",
                          "lineNumber": 558,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_choices:\n",
                          "lineNumber": 559,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._column_choices_map = dict([\n",
                          "lineNumber": 560,
                          "lineChange": "none"
                        },
                        {
                          "line": "                (column, dict(choices))\n",
                          "lineNumber": 561,
                          "lineChange": "none"
                        },
                        {
                          "line": "                for column, choices in self.column_choices.items()\n",
                          "lineNumber": 562,
                          "lineChange": "none"
                        },
                        {
                          "line": "            ])\n",
                          "lineNumber": 563,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 564,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_choices = self._column_choices_map = dict()\n",
                          "lineNumber": 565,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 566,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Filters\n",
                          "lineNumber": 567,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._filters = self.get_filters()\n",
                          "lineNumber": 568,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 569,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Type formatters\n",
                          "lineNumber": 570,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_type_formatters is None:\n",
                          "lineNumber": 571,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_type_formatters = dict(typefmt.BASE_FORMATTERS)\n",
                          "lineNumber": 572,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 573,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_descriptions is None:\n",
                          "lineNumber": 574,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_descriptions = dict()\n",
                          "lineNumber": 575,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 576,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self._filters:\n",
                          "lineNumber": 577,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._flattened_filters_by_group = OrderedDict()\n",
                          "lineNumber": 578,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 579,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for flt in self._filters:\n",
                          "lineNumber": 580,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if flt.name not in self._flattened_filters_by_group:\n",
                          "lineNumber": 581,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    self._flattened_filters_by_group[flt.name] = []\n",
                          "lineNumber": 582,
                          "lineChange": "none"
                        },
                        {
                          "line": "                group = self._flattened_filters_by_group[flt.name]\n",
                          "lineNumber": 583,
                          "lineChange": "none"
                        },
                        {
                          "line": "                group.append({'name': flt.name,\n",
                          "lineNumber": 584,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'label': self.unique_filter_label(flt),\n",
                          "lineNumber": 585,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'operation': flt.operation(),\n",
                          "lineNumber": 586,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'options': flt.get_options(self) or None,\n",
                          "lineNumber": 587,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'data_type': flt.data_type})\n",
                          "lineNumber": 588,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 589,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._flattened_filters_by_group = None\n",
                          "lineNumber": 590,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 591,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Form rendering rules\n",
                          "lineNumber": 592,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_create_rules:\n",
                          "lineNumber": 593,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_create_rules = rules.RuleSet(self, self.form_create_rules)\n",
                          "lineNumber": 594,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 595,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_create_rules = None\n",
                          "lineNumber": 596,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 597,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_edit_rules:\n",
                          "lineNumber": 598,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_edit_rules = rules.RuleSet(self, self.form_edit_rules)\n",
                          "lineNumber": 599,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 600,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_edit_rules = None\n",
                          "lineNumber": 601,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 602,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_rules:\n",
                          "lineNumber": 603,
                          "lineChange": "none"
                        },
                        {
                          "line": "            form_rules = rules.RuleSet(self, self.form_rules)\n",
                          "lineNumber": 604,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 605,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if not self._form_create_rules:\n",
                          "lineNumber": 606,
                          "lineChange": "none"
                        },
                        {
                          "line": "                self._form_create_rules = form_rules\n",
                          "lineNumber": 607,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 608,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if not self._form_edit_rules:\n",
                          "lineNumber": 609,
                          "lineChange": "none"
                        },
                        {
                          "line": "                self._form_edit_rules = form_rules\n",
                          "lineNumber": 610,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 611,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Primary key\n",
                          "lineNumber": 612,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_pk_value(self, model):\n",
                          "lineNumber": 613,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 614,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return PK value from a model object.\n",
                          "lineNumber": 615,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 616,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 617,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 618,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # List view\n",
                          "lineNumber": 619,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_list_columns(self):\n",
                          "lineNumber": 620,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 621,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return list of the model field names. Must be implemented in\n",
                          "lineNumber": 622,
                          "lineChange": "none"
                        },
                        {
                          "line": "            the child class.\n",
                          "lineNumber": 623,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 624,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Expected return format is list of tuples with field name and\n",
                          "lineNumber": 625,
                          "lineChange": "none"
                        },
                        {
                          "line": "            display text. For example::\n",
                          "lineNumber": 626,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 627,
                          "lineChange": "none"
                        },
                        {
                          "line": "                ['name', 'first_name', 'last_name']\n",
                          "lineNumber": 628,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 629,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement scaffold_list_columns method')\n",
                          "lineNumber": 630,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 631,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_column_name(self, field):\n",
                          "lineNumber": 632,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 633,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return a human-readable column name.\n",
                          "lineNumber": 634,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 635,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param field:\n",
                          "lineNumber": 636,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model field name.\n",
                          "lineNumber": 637,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 638,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_labels and field in self.column_labels:\n",
                          "lineNumber": 639,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self.column_labels[field]\n",
                          "lineNumber": 640,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 641,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self._prettify_name(field)\n",
                          "lineNumber": 642,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 643,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_list_columns(self):\n",
                          "lineNumber": 644,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 645,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns a list of the model field names. If `column_list` was\n",
                          "lineNumber": 646,
                          "lineChange": "none"
                        },
                        {
                          "line": "            set, returns it. Otherwise calls `scaffold_list_columns`\n",
                          "lineNumber": 647,
                          "lineChange": "none"
                        },
                        {
                          "line": "            to generate the list from the model.\n",
                          "lineNumber": 648,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 649,
                          "lineChange": "none"
                        },
                        {
                          "line": "        columns = self.column_list\n",
                          "lineNumber": 650,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 651,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if columns is None:\n",
                          "lineNumber": 652,
                          "lineChange": "none"
                        },
                        {
                          "line": "            columns = self.scaffold_list_columns()\n",
                          "lineNumber": 653,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 654,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # Filter excluded columns\n",
                          "lineNumber": 655,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if self.column_exclude_list:\n",
                          "lineNumber": 656,
                          "lineChange": "none"
                        },
                        {
                          "line": "                columns = [c for c in columns if c not in self.column_exclude_list]\n",
                          "lineNumber": 657,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 658,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return [(c, self.get_column_name(c)) for c in columns]\n",
                          "lineNumber": 659,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 660,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_sortable_columns(self):\n",
                          "lineNumber": 661,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 662,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns dictionary of sortable columns. Must be implemented in\n",
                          "lineNumber": 663,
                          "lineChange": "none"
                        },
                        {
                          "line": "            the child class.\n",
                          "lineNumber": 664,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 665,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Expected return format is a dictionary, where keys are field names and\n",
                          "lineNumber": 666,
                          "lineChange": "none"
                        },
                        {
                          "line": "            values are property names.\n",
                          "lineNumber": 667,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 668,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement scaffold_sortable_columns method')\n",
                          "lineNumber": 669,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 670,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_sortable_columns(self):\n",
                          "lineNumber": 671,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 672,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns a dictionary of the sortable columns. Key is a model\n",
                          "lineNumber": 673,
                          "lineChange": "none"
                        },
                        {
                          "line": "            field name and value is sort column (for example - attribute).\n",
                          "lineNumber": 674,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 675,
                          "lineChange": "none"
                        },
                        {
                          "line": "            If `column_sortable_list` is set, will use it. Otherwise, will call\n",
                          "lineNumber": 676,
                          "lineChange": "none"
                        },
                        {
                          "line": "            `scaffold_sortable_columns` to get them from the model.\n",
                          "lineNumber": 677,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 678,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_sortable_list is None:\n",
                          "lineNumber": 679,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self.scaffold_sortable_columns() or dict()\n",
                          "lineNumber": 680,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 681,
                          "lineChange": "none"
                        },
                        {
                          "line": "            result = dict()\n",
                          "lineNumber": 682,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 683,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for c in self.column_sortable_list:\n",
                          "lineNumber": 684,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if isinstance(c, tuple):\n",
                          "lineNumber": 685,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[c[0]] = c[1]\n",
                          "lineNumber": 686,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 687,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[c] = c\n",
                          "lineNumber": 688,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 689,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return result\n",
                          "lineNumber": 690,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 691,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def init_search(self):\n",
                          "lineNumber": 692,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 693,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Initialize search. If data provider does not support search,\n",
                          "lineNumber": 694,
                          "lineChange": "none"
                        },
                        {
                          "line": "            `init_search` will return `False`.\n",
                          "lineNumber": 695,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 696,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return False\n",
                          "lineNumber": 697,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 698,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_filters(self, name):\n",
                          "lineNumber": 699,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 700,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Generate filter object for the given name\n",
                          "lineNumber": 701,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 702,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 703,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Name of the field\n",
                          "lineNumber": 704,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 705,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return None\n",
                          "lineNumber": 706,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 707,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def is_valid_filter(self, filter):\n",
                          "lineNumber": 708,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 709,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Verify that the provided filter object is valid.\n",
                          "lineNumber": 710,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 711,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override in model backend implementation to verify if\n",
                          "lineNumber": 712,
                          "lineChange": "none"
                        },
                        {
                          "line": "            the provided filter type is allowed.\n",
                          "lineNumber": 713,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 714,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param filter:\n",
                          "lineNumber": 715,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Filter object to verify.\n",
                          "lineNumber": 716,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 717,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return isinstance(filter, filters.BaseFilter)\n",
                          "lineNumber": 718,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 719,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_filters(self):\n",
                          "lineNumber": 720,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 721,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return a list of filter objects.\n",
                          "lineNumber": 722,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 723,
                          "lineChange": "none"
                        },
                        {
                          "line": "            If your model backend implementation does not support filters,\n",
                          "lineNumber": 724,
                          "lineChange": "none"
                        },
                        {
                          "line": "            override this method and return `None`.\n",
                          "lineNumber": 725,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 726,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_filters:\n",
                          "lineNumber": 727,
                          "lineChange": "none"
                        },
                        {
                          "line": "            collection = []\n",
                          "lineNumber": 728,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 729,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for n in self.column_filters:\n",
                          "lineNumber": 730,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if self.is_valid_filter(n):\n",
                          "lineNumber": 731,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    collection.append(n)\n",
                          "lineNumber": 732,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 733,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    flt = self.scaffold_filters(n)\n",
                          "lineNumber": 734,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    if flt:\n",
                          "lineNumber": 735,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        collection.extend(flt)\n",
                          "lineNumber": 736,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    else:\n",
                          "lineNumber": 737,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        raise Exception('Unsupported filter type %s' % n)\n",
                          "lineNumber": 738,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return collection\n",
                          "lineNumber": 739,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 740,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 741,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 742,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_form(self):\n",
                          "lineNumber": 743,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 744,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create `form.BaseForm` inherited class from the model. Must be\n",
                          "lineNumber": 745,
                          "lineChange": "none"
                        },
                        {
                          "line": "            implemented in the child class.\n",
                          "lineNumber": 746,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 747,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement scaffold_form method')\n",
                          "lineNumber": 748,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 749,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_form(self):\n",
                          "lineNumber": 750,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 751,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Get form class.\n",
                          "lineNumber": 752,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 753,
                          "lineChange": "none"
                        },
                        {
                          "line": "            If ``self.form`` is set, will return it and will call\n",
                          "lineNumber": 754,
                          "lineChange": "none"
                        },
                        {
                          "line": "            ``self.scaffold_form`` otherwise.\n",
                          "lineNumber": 755,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 756,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement customized behavior.\n",
                          "lineNumber": 757,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 758,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form is not None:\n",
                          "lineNumber": 759,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self.form\n",
                          "lineNumber": 760,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 761,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.scaffold_form()\n",
                          "lineNumber": 762,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 763,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_create_form(self):\n",
                          "lineNumber": 764,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 765,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create form class for model creation view.\n",
                          "lineNumber": 766,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 767,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement customized behavior.\n",
                          "lineNumber": 768,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 769,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.get_form()\n",
                          "lineNumber": 770,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 771,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_edit_form(self):\n",
                          "lineNumber": 772,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 773,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create form class for model editing view.\n",
                          "lineNumber": 774,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 775,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement customized behavior.\n",
                          "lineNumber": 776,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 777,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.get_form()\n",
                          "lineNumber": 778,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 779,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def create_form(self, obj=None):\n",
                          "lineNumber": 780,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 781,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Instantiate model creation form and return it.\n",
                          "lineNumber": 782,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 783,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement custom behavior.\n",
                          "lineNumber": 784,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 785,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self._create_form_class(get_form_data(), obj=obj)\n",
                          "lineNumber": 786,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 787,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def edit_form(self, obj=None):\n",
                          "lineNumber": 788,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 789,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Instantiate model editing form and return it.\n",
                          "lineNumber": 790,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 791,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement custom behavior.\n",
                          "lineNumber": 792,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 793,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self._edit_form_class(get_form_data(), obj=obj)\n",
                          "lineNumber": 794,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 795,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Helpers\n",
                          "lineNumber": 796,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def is_sortable(self, name):\n",
                          "lineNumber": 797,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 798,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Verify if column is sortable.\n",
                          "lineNumber": 799,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 800,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 801,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Column name.\n",
                          "lineNumber": 802,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 803,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return name in self._sortable_columns\n",
                          "lineNumber": 804,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 805,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_column_by_idx(self, idx):\n",
                          "lineNumber": 806,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 807,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return column index by\n",
                          "lineNumber": 808,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 809,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if idx is None or idx < 0 or idx >= len(self._list_columns):\n",
                          "lineNumber": 810,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 811,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 812,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self._list_columns[idx]\n",
                          "lineNumber": 813,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 814,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_default_order(self):\n",
                          "lineNumber": 815,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 816,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return default sort order\n",
                          "lineNumber": 817,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 818,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_default_sort:\n",
                          "lineNumber": 819,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if isinstance(self.column_default_sort, tuple):\n",
                          "lineNumber": 820,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return self.column_default_sort\n",
                          "lineNumber": 821,
                          "lineChange": "none"
                        },
                        {
                          "line": "            else:\n",
                          "lineNumber": 822,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return self.column_default_sort, False\n",
                          "lineNumber": 823,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 824,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return None\n",
                          "lineNumber": 825,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 826,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Database-related API\n",
                          "lineNumber": 827,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_list(self, page, sort_field, sort_desc, search, filters):\n",
                          "lineNumber": 828,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 829,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return a paginated and sorted list of models from the data source.\n",
                          "lineNumber": 830,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 831,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 832,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 833,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param page:\n",
                          "lineNumber": 834,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Page number, 0 based. Can be set to None if it is first page.\n",
                          "lineNumber": 835,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort_field:\n",
                          "lineNumber": 836,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Sort column name or None.\n",
                          "lineNumber": 837,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort_desc:\n",
                          "lineNumber": 838,
                          "lineChange": "none"
                        },
                        {
                          "line": "                If set to True, sorting is in descending order.\n",
                          "lineNumber": 839,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param search:\n",
                          "lineNumber": 840,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Search query\n",
                          "lineNumber": 841,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param filters:\n",
                          "lineNumber": 842,
                          "lineChange": "none"
                        },
                        {
                          "line": "                List of filter tuples. First value in a tuple is a search\n",
                          "lineNumber": 843,
                          "lineChange": "none"
                        },
                        {
                          "line": "                index, second value is a search value.\n",
                          "lineNumber": 844,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 845,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement get_list method')\n",
                          "lineNumber": 846,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 847,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_one(self, id):\n",
                          "lineNumber": 848,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 849,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return one model by its id.\n",
                          "lineNumber": 850,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 851,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 852,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 853,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param id:\n",
                          "lineNumber": 854,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model id\n",
                          "lineNumber": 855,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 856,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement get_one method')\n",
                          "lineNumber": 857,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 858,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Model event handlers\n",
                          "lineNumber": 859,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def on_model_change(self, form, model, is_created):\n",
                          "lineNumber": 860,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 861,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Perform some actions after a model is created or updated.\n",
                          "lineNumber": 862,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 863,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Called from create_model and update_model in the same transaction\n",
                          "lineNumber": 864,
                          "lineChange": "none"
                        },
                        {
                          "line": "            (if it has any meaning for a store backend).\n",
                          "lineNumber": 865,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 866,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default does nothing.\n",
                          "lineNumber": 867,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 868,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 869,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form used to create/update model\n",
                          "lineNumber": 870,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 871,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model that will be created/updated\n",
                          "lineNumber": 872,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param is_created:\n",
                          "lineNumber": 873,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Will be set to True if model was created and to False if edited\n",
                          "lineNumber": 874,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 875,
                          "lineChange": "none"
                        },
                        {
                          "line": "        pass\n",
                          "lineNumber": 876,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 877,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _on_model_change(self, form, model, is_created):\n",
                          "lineNumber": 878,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 879,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Compatibility helper.\n",
                          "lineNumber": 880,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 881,
                          "lineChange": "none"
                        },
                        {
                          "line": "        try:\n",
                          "lineNumber": 882,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.on_model_change(form, model, is_created)\n",
                          "lineNumber": 883,
                          "lineChange": "none"
                        },
                        {
                          "line": "        except TypeError:\n",
                          "lineNumber": 884,
                          "lineChange": "none"
                        },
                        {
                          "line": "            msg = ('%s.on_model_change() now accepts third ' +\n",
                          "lineNumber": 885,
                          "lineChange": "none"
                        },
                        {
                          "line": "                   'parameter is_created. Please update your code') % self.model\n",
                          "lineNumber": 886,
                          "lineChange": "none"
                        },
                        {
                          "line": "            warnings.warn(msg)\n",
                          "lineNumber": 887,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 888,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.on_model_change(form, model)\n",
                          "lineNumber": 889,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 890,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def after_model_change(self, form, model, is_created):\n",
                          "lineNumber": 891,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 892,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Perform some actions after a model was created or updated and\n",
                          "lineNumber": 893,
                          "lineChange": "none"
                        },
                        {
                          "line": "            committed to the database.\n",
                          "lineNumber": 894,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 895,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Called from create_model after successful database commit.\n",
                          "lineNumber": 896,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 897,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default does nothing.\n",
                          "lineNumber": 898,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 899,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 900,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form used to create/update model\n",
                          "lineNumber": 901,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 902,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model that was created/updated\n",
                          "lineNumber": 903,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param is_created:\n",
                          "lineNumber": 904,
                          "lineChange": "none"
                        },
                        {
                          "line": "                True if model was created, False if model was updated\n",
                          "lineNumber": 905,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 906,
                          "lineChange": "none"
                        },
                        {
                          "line": "        pass\n",
                          "lineNumber": 907,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 908,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def on_model_delete(self, model):\n",
                          "lineNumber": 909,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 910,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Perform some actions before a model is deleted.\n",
                          "lineNumber": 911,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 912,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Called from delete_model in the same transaction\n",
                          "lineNumber": 913,
                          "lineChange": "none"
                        },
                        {
                          "line": "            (if it has any meaning for a store backend).\n",
                          "lineNumber": 914,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 915,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default do nothing.\n",
                          "lineNumber": 916,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 917,
                          "lineChange": "none"
                        },
                        {
                          "line": "        pass\n",
                          "lineNumber": 918,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 919,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def create_model(self, form):\n",
                          "lineNumber": 920,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 921,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create model from the form.\n",
                          "lineNumber": 922,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 923,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns `True` if operation succeeded.\n",
                          "lineNumber": 924,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 925,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 926,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 927,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 928,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form instance\n",
                          "lineNumber": 929,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 930,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 931,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 932,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def update_model(self, form, model):\n",
                          "lineNumber": 933,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 934,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Update model from the form.\n",
                          "lineNumber": 935,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 936,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns `True` if operation succeeded.\n",
                          "lineNumber": 937,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 938,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 939,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 940,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 941,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form instance\n",
                          "lineNumber": 942,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 943,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model instance\n",
                          "lineNumber": 944,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 945,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 946,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 947,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def delete_model(self, model):\n",
                          "lineNumber": 948,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 949,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Delete model.\n",
                          "lineNumber": 950,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 951,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns `True` if operation succeeded.\n",
                          "lineNumber": 952,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 953,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 954,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 955,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 956,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model instance\n",
                          "lineNumber": 957,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 958,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 959,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 960,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Various helpers\n",
                          "lineNumber": 961,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _prettify_name(self, name):\n",
                          "lineNumber": 962,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 963,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Prettify pythonic variable name.\n",
                          "lineNumber": 964,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 965,
                          "lineChange": "none"
                        },
                        {
                          "line": "            For example, 'hello_world' will be converted to 'Hello World'\n",
                          "lineNumber": 966,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 967,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 968,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Name to prettify\n",
                          "lineNumber": 969,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 970,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return prettify_name(name)\n",
                          "lineNumber": 971,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 972,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_empty_list_message(self):\n",
                          "lineNumber": 973,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return gettext('There are no items in the table.')\n",
                          "lineNumber": 974,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 975,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def unique_filter_label(self, flt):\n",
                          "lineNumber": 976,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 977,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Given a filter `flt`, return a unique name for that filter in\n",
                          "lineNumber": 978,
                          "lineChange": "none"
                        },
                        {
                          "line": "            this view.\n",
                          "lineNumber": 979,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 980,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default, returns a numeric index or a human-readable filter name\n",
                          "lineNumber": 981,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 982,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Does not include the `flt[n]_` portion of the filter name.\n",
                          "lineNumber": 983,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 984,
                          "lineChange": "none"
                        },
                        {
                          "line": "            To use custom names, override this function, eg\n",
                          "lineNumber": 985,
                          "lineChange": "none"
                        },
                        {
                          "line": "            def unique_filter_label(self, flt):\n",
                          "lineNumber": 986,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return flt.name + flt.__class__.__name__\n",
                          "lineNumber": 987,
                          "lineChange": "none"
                        },
                        {
                          "line": "                \n",
                          "lineNumber": 988,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Be aware that if you override this method, the default URL format\n",
                          "lineNumber": 989,
                          "lineChange": "none"
                        },
                        {
                          "line": "            will no longer work.\n",
                          "lineNumber": 990,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 991,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.named_filter_urls:\n",
                          "lineNumber": 992,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return re.sub('\\W', '_', u'{name}_{operation}'.format(name=flt.name, operation=flt.operation())).lower()\n",
                          "lineNumber": 993,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 994,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return str(self._filters.index(flt))\n",
                          "lineNumber": 995,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 996,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_filter_args(self):\n",
                          "lineNumber": 997,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 998,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Retrieve and parse filter parameters from the request URL.\n",
                          "lineNumber": 999,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 1000,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns a list of 2-tuples in the format [(idx, value), ...],\n",
                          "lineNumber": 1001,
                          "lineChange": "none"
                        },
                        {
                          "line": "            where idx is the index into the list returned by get_filters().\n",
                          "lineNumber": 1002,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 1003,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override this method to provide your own URL filter format.\n",
                          "lineNumber": 1004,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1005,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self._filters:\n",
                          "lineNumber": 1006,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 1007,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1008,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filter_idx_by_label = dict((self.unique_filter_label(flt), i) for i, flt in enumerate(self._filters))\n",
                          "lineNumber": 1009,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 1010,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sfilters = []\n",
                          "lineNumber": 1011,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1012,
                          "lineChange": "none"
                        },
                        {
                          "line": "        for n in request.args:\n",
                          "lineNumber": 1013,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if not n.startswith('flt'):\n",
                          "lineNumber": 1014,
                          "lineChange": "none"
                        },
                        {
                          "line": "                continue\n",
                          "lineNumber": 1015,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if '_' not in n:\n",
                          "lineNumber": 1016,
                          "lineChange": "none"
                        },
                        {
                          "line": "                continue\n",
                          "lineNumber": 1017,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1018,
                          "lineChange": "none"
                        },
                        {
                          "line": "            pos, filter_label = n[3:].split('_', 1)\n",
                          "lineNumber": 1019,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 1020,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # If pos not specified, just add incrementally to the list.\n",
                          "lineNumber": 1021,
                          "lineChange": "none"
                        },
                        {
                          "line": "            pos = int(pos) if pos else len(sfilters)\n",
                          "lineNumber": 1022,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1023,
                          "lineChange": "none"
                        },
                        {
                          "line": "            try:\n",
                          "lineNumber": 1024,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # See if filter is numeric\n",
                          "lineNumber": 1025,
                          "lineChange": "none"
                        },
                        {
                          "line": "                idx = int(filter_label)\n",
                          "lineNumber": 1026,
                          "lineChange": "none"
                        },
                        {
                          "line": "            except ValueError:\n",
                          "lineNumber": 1027,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # If non-numeric, look filter up by name\n",
                          "lineNumber": 1028,
                          "lineChange": "none"
                        },
                        {
                          "line": "                try:\n",
                          "lineNumber": 1029,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    idx = filter_idx_by_label[filter_label]\n",
                          "lineNumber": 1030,
                          "lineChange": "none"
                        },
                        {
                          "line": "                except KeyError:\n",
                          "lineNumber": 1031,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # No matching filter name\n",
                          "lineNumber": 1032,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    continue\n",
                          "lineNumber": 1033,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1034,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if 0 <= idx < len(self._filters):\n",
                          "lineNumber": 1035,
                          "lineChange": "none"
                        },
                        {
                          "line": "                flt = self._filters[idx]\n",
                          "lineNumber": 1036,
                          "lineChange": "none"
                        },
                        {
                          "line": "                value = request.args[n]\n",
                          "lineNumber": 1037,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if flt.validate(value):\n",
                          "lineNumber": 1038,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    sfilters.append((pos, (idx, flt.clean(value))))\n",
                          "lineNumber": 1039,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1040,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return [v[1] for v in sorted(sfilters, key=lambda n: n[0])]\n",
                          "lineNumber": 1041,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1042,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_listing_args(self):\n",
                          "lineNumber": 1043,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1044,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return generic list view arguments from query string.\n",
                          "lineNumber": 1045,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1046,
                          "lineChange": "none"
                        },
                        {
                          "line": "        page = request.args.get('page', 0, type=int)\n",
                          "lineNumber": 1047,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sort = request.args.get('sort', None, type=int)\n",
                          "lineNumber": 1048,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sort_desc = request.args.get('desc', None, type=int)\n",
                          "lineNumber": 1049,
                          "lineChange": "none"
                        },
                        {
                          "line": "        search = request.args.get('search', None)\n",
                          "lineNumber": 1050,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return page, sort, sort_desc, search\n",
                          "lineNumber": 1051,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1052,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_url(self, view=None, page=None, sort=None, sort_desc=None,\n",
                          "lineNumber": 1053,
                          "lineChange": "none"
                        },
                        {
                          "line": "                 search=None, filters=None):\n",
                          "lineNumber": 1054,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1055,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Generate page URL with current page, sort column and\n",
                          "lineNumber": 1056,
                          "lineChange": "none"
                        },
                        {
                          "line": "            other parameters.\n",
                          "lineNumber": 1057,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1058,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param view:\n",
                          "lineNumber": 1059,
                          "lineChange": "none"
                        },
                        {
                          "line": "                View name\n",
                          "lineNumber": 1060,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param page:\n",
                          "lineNumber": 1061,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Page number\n",
                          "lineNumber": 1062,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort:\n",
                          "lineNumber": 1063,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Sort column index\n",
                          "lineNumber": 1064,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort_desc:\n",
                          "lineNumber": 1065,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Use descending sorting order\n",
                          "lineNumber": 1066,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param search:\n",
                          "lineNumber": 1067,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Search query\n",
                          "lineNumber": 1068,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param filters:\n",
                          "lineNumber": 1069,
                          "lineChange": "none"
                        },
                        {
                          "line": "                List of active filters\n",
                          "lineNumber": 1070,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1071,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not search:\n",
                          "lineNumber": 1072,
                          "lineChange": "none"
                        },
                        {
                          "line": "            search = None\n",
                          "lineNumber": 1073,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1074,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not page:\n",
                          "lineNumber": 1075,
                          "lineChange": "none"
                        },
                        {
                          "line": "            page = None\n",
                          "lineNumber": 1076,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1077,
                          "lineChange": "none"
                        },
                        {
                          "line": "        kwargs = dict(page=page, sort=sort, desc=sort_desc, search=search)\n",
                          "lineNumber": 1078,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1079,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if filters:\n",
                          "lineNumber": 1080,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for flt in filters:\n",
                          "lineNumber": 1081,
                          "lineChange": "none"
                        },
                        {
                          "line": "                key = 'flt_%s' % self.unique_filter_label(self._filters[flt[0]])\n",
                          "lineNumber": 1082,
                          "lineChange": "none"
                        },
                        {
                          "line": "                kwargs[key] = flt[1]\n",
                          "lineNumber": 1083,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1084,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return url_for(view, **kwargs)\n",
                          "lineNumber": 1085,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 1086,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def is_action_allowed(self, name):\n",
                          "lineNumber": 1087,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1088,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override this method to allow or disallow actions based\n",
                          "lineNumber": 1089,
                          "lineChange": "none"
                        },
                        {
                          "line": "            on some condition.\n",
                          "lineNumber": 1090,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1091,
                          "lineChange": "none"
                        },
                        {
                          "line": "            The default implementation only checks if the particular action\n",
                          "lineNumber": 1092,
                          "lineChange": "none"
                        },
                        {
                          "line": "            is not in `action_disallowed_list`.\n",
                          "lineNumber": 1093,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1094,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return name not in self.action_disallowed_list\n",
                          "lineNumber": 1095,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1096,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_field_value(self, model, name):\n",
                          "lineNumber": 1097,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1098,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Get unformatted field value from the model\n",
                          "lineNumber": 1099,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1100,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return rec_getattr(model, name)\n",
                          "lineNumber": 1101,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1102,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def filters_by_label(self):\n",
                          "lineNumber": 1103,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1104,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Flattened dict of all filters, indexed by their label.\n",
                          "lineNumber": 1105,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1106,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return dict((self.unique_filter_label(flt), flt) for flt in self._filters)\n",
                          "lineNumber": 1107,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1108,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @contextfunction\n",
                          "lineNumber": 1109,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_list_value(self, context, model, name):\n",
                          "lineNumber": 1110,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1111,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns the value to be displayed in the list view\n",
                          "lineNumber": 1112,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1113,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param context:\n",
                          "lineNumber": 1114,
                          "lineChange": "none"
                        },
                        {
                          "line": "                :py:class:`jinja2.runtime.Context`\n",
                          "lineNumber": 1115,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 1116,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model instance\n",
                          "lineNumber": 1117,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 1118,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Field name\n",
                          "lineNumber": 1119,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1120,
                          "lineChange": "none"
                        },
                        {
                          "line": "        column_fmt = self.column_formatters.get(name)\n",
                          "lineNumber": 1121,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if column_fmt is not None:\n",
                          "lineNumber": 1122,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return column_fmt(self, context, model, name)\n",
                          "lineNumber": 1123,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1124,
                          "lineChange": "none"
                        },
                        {
                          "line": "            value = self._get_field_value(model, name)\n",
                          "lineNumber": 1125,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1126,
                          "lineChange": "none"
                        },
                        {
                          "line": "        choices_map = self._column_choices_map.get(name, {})\n",
                          "lineNumber": 1127,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if choices_map:\n",
                          "lineNumber": 1128,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return choices_map.get(value) or value\n",
                          "lineNumber": 1129,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1130,
                          "lineChange": "none"
                        },
                        {
                          "line": "        type_fmt = self.column_type_formatters.get(type(value))\n",
                          "lineNumber": 1131,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if type_fmt is not None:\n",
                          "lineNumber": 1132,
                          "lineChange": "none"
                        },
                        {
                          "line": "            value = type_fmt(self, value)\n",
                          "lineNumber": 1133,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1134,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return value\n",
                          "lineNumber": 1135,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1136,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # AJAX references\n",
                          "lineNumber": 1137,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _process_ajax_references(self):\n",
                          "lineNumber": 1138,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1139,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Process `form_ajax_refs` and generate model loaders that\n",
                          "lineNumber": 1140,
                          "lineChange": "none"
                        },
                        {
                          "line": "            will be used by the `ajax_lookup` view.\n",
                          "lineNumber": 1141,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1142,
                          "lineChange": "none"
                        },
                        {
                          "line": "        result = {}\n",
                          "lineNumber": 1143,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1144,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_ajax_refs:\n",
                          "lineNumber": 1145,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for name, options in iteritems(self.form_ajax_refs):\n",
                          "lineNumber": 1146,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if isinstance(options, dict):\n",
                          "lineNumber": 1147,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[name] = self._create_ajax_loader(name, options)\n",
                          "lineNumber": 1148,
                          "lineChange": "none"
                        },
                        {
                          "line": "                elif isinstance(options, AjaxModelLoader):\n",
                          "lineNumber": 1149,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[name] = options\n",
                          "lineNumber": 1150,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 1151,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    raise ValueError('%s.form_ajax_refs can not handle %s types' % (self, type(options)))\n",
                          "lineNumber": 1152,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1153,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return result\n",
                          "lineNumber": 1154,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1155,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _create_ajax_loader(self, name, options):\n",
                          "lineNumber": 1156,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1157,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Model backend will override this to implement AJAX model loading.\n",
                          "lineNumber": 1158,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1159,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 1160,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1161,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Views\n",
                          "lineNumber": 1162,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/')\n",
                          "lineNumber": 1163,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def index_view(self):\n",
                          "lineNumber": 1164,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1165,
                          "lineChange": "none"
                        },
                        {
                          "line": "            List view\n",
                          "lineNumber": 1166,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1167,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Grab parameters from URL\n",
                          "lineNumber": 1168,
                          "lineChange": "none"
                        },
                        {
                          "line": "        page, sort_idx, sort_desc, search = self._get_listing_args()\n",
                          "lineNumber": 1169,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filters = self.get_filter_args()\n",
                          "lineNumber": 1170,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1171,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Map column index to column name\n",
                          "lineNumber": 1172,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sort_column = self._get_column_by_idx(sort_idx)\n",
                          "lineNumber": 1173,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if sort_column is not None:\n",
                          "lineNumber": 1174,
                          "lineChange": "none"
                        },
                        {
                          "line": "            sort_column = sort_column[0]\n",
                          "lineNumber": 1175,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1176,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Get count and data\n",
                          "lineNumber": 1177,
                          "lineChange": "none"
                        },
                        {
                          "line": "        count, data = self.get_list(page, sort_column, sort_desc,\n",
                          "lineNumber": 1178,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                    search, filters)\n",
                          "lineNumber": 1179,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1180,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Calculate number of pages\n",
                          "lineNumber": 1181,
                          "lineChange": "none"
                        },
                        {
                          "line": "        num_pages = count // self.page_size\n",
                          "lineNumber": 1182,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if count % self.page_size != 0:\n",
                          "lineNumber": 1183,
                          "lineChange": "none"
                        },
                        {
                          "line": "            num_pages += 1\n",
                          "lineNumber": 1184,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1185,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Various URL generation helpers\n",
                          "lineNumber": 1186,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def pager_url(p):\n",
                          "lineNumber": 1187,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # Do not add page number if it is first page\n",
                          "lineNumber": 1188,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if p == 0:\n",
                          "lineNumber": 1189,
                          "lineChange": "none"
                        },
                        {
                          "line": "                p = None\n",
                          "lineNumber": 1190,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1191,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self._get_url('.index_view', p, sort_idx, sort_desc,\n",
                          "lineNumber": 1192,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 search, filters)\n",
                          "lineNumber": 1193,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1194,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def sort_url(column, invert=False):\n",
                          "lineNumber": 1195,
                          "lineChange": "none"
                        },
                        {
                          "line": "            desc = None\n",
                          "lineNumber": 1196,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1197,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if invert and not sort_desc:\n",
                          "lineNumber": 1198,
                          "lineChange": "none"
                        },
                        {
                          "line": "                desc = 1\n",
                          "lineNumber": 1199,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1200,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self._get_url('.index_view', page, column, desc,\n",
                          "lineNumber": 1201,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 search, filters)\n",
                          "lineNumber": 1202,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1203,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Actions\n",
                          "lineNumber": 1204,
                          "lineChange": "none"
                        },
                        {
                          "line": "        actions, actions_confirmation = self.get_actions_list()\n",
                          "lineNumber": 1205,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1206,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.render(self.list_template,\n",
                          "lineNumber": 1207,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               data=data,\n",
                          "lineNumber": 1208,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # List\n",
                          "lineNumber": 1209,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               list_columns=self._list_columns,\n",
                          "lineNumber": 1210,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sortable_columns=self._sortable_columns,\n",
                          "lineNumber": 1211,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Stuff\n",
                          "lineNumber": 1212,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               enumerate=enumerate,\n",
                          "lineNumber": 1213,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               get_pk_value=self.get_pk_value,\n",
                          "lineNumber": 1214,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               get_value=self.get_list_value,\n",
                          "lineNumber": 1215,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               return_url=self._get_url('.index_view',\n",
                          "lineNumber": 1216,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        page,\n",
                          "lineNumber": 1217,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        sort_idx,\n",
                          "lineNumber": 1218,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        sort_desc,\n",
                          "lineNumber": 1219,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        search,\n",
                          "lineNumber": 1220,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        filters),\n",
                          "lineNumber": 1221,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Pagination\n",
                          "lineNumber": 1222,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               count=count,\n",
                          "lineNumber": 1223,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               pager_url=pager_url,\n",
                          "lineNumber": 1224,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               num_pages=num_pages,\n",
                          "lineNumber": 1225,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               page=page,\n",
                          "lineNumber": 1226,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Sorting\n",
                          "lineNumber": 1227,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sort_column=sort_idx,\n",
                          "lineNumber": 1228,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sort_desc=sort_desc,\n",
                          "lineNumber": 1229,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sort_url=sort_url,\n",
                          "lineNumber": 1230,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Search\n",
                          "lineNumber": 1231,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               search_supported=self._search_supported,\n",
                          "lineNumber": 1232,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               clear_search_url=self._get_url('.index_view',\n",
                          "lineNumber": 1233,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                              None,\n",
                          "lineNumber": 1234,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                              sort_idx,\n",
                          "lineNumber": 1235,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                              sort_desc),\n",
                          "lineNumber": 1236,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               search=search,\n",
                          "lineNumber": 1237,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Filters\n",
                          "lineNumber": 1238,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               filters=self._filters,\n",
                          "lineNumber": 1239,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               filter_groups=self._flattened_filters_by_group,\n",
                          "lineNumber": 1240,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               active_filters=filters,\n",
                          "lineNumber": 1241,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1242,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Actions\n",
                          "lineNumber": 1243,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               actions=actions,\n",
                          "lineNumber": 1244,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               actions_confirmation=actions_confirmation)\n",
                          "lineNumber": 1245,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1246,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/new/', methods=('GET', 'POST'))\n",
                          "lineNumber": 1247,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def create_view(self):\n",
                          "lineNumber": 1248,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1249,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create model view\n",
                          "lineNumber": 1250,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1251,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                          "lineNumber": 1252,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1253,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self.can_create:\n",
                          "lineNumber": 1254,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1255,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1256,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form = self.create_form()\n",
                          "lineNumber": 1257,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1258,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if validate_form_on_submit(form):\n",
                          "lineNumber": 1259,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if self.create_model(form):\n",
                          "lineNumber": 1260,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if '_add_another' in request.form:\n",
                          "lineNumber": 1261,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    flash(gettext('Model was successfully created.'))\n",
                          "lineNumber": 1262,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(url_for('.create_view', url=return_url))\n",
                          "lineNumber": 1263,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 1264,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(return_url)\n",
                          "lineNumber": 1265,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1266,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                          "lineNumber": 1267,
                          "lineChange": "none"
                        },
                        {
                          "line": "                             form_rules=self._form_create_rules)\n",
                          "lineNumber": 1268,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1269,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.render(self.create_template,\n",
                          "lineNumber": 1270,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form=form,\n",
                          "lineNumber": 1271,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form_opts=form_opts,\n",
                          "lineNumber": 1272,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           return_url=return_url)\n",
                          "lineNumber": 1273,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1274,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/edit/', methods=('GET', 'POST'))\n",
                          "lineNumber": 1275,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def edit_view(self):\n",
                          "lineNumber": 1276,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1277,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Edit model view\n",
                          "lineNumber": 1278,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1279,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                          "lineNumber": 1280,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1281,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self.can_edit:\n",
                          "lineNumber": 1282,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1283,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1284,
                          "lineChange": "none"
                        },
                        {
                          "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                          "lineNumber": 1285,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if id is None:\n",
                          "lineNumber": 1286,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1287,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1288,
                          "lineChange": "none"
                        },
                        {
                          "line": "        model = self.get_one(id)\n",
                          "lineNumber": 1289,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1290,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if model is None:\n",
                          "lineNumber": 1291,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1292,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1293,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form = self.edit_form(obj=model)\n",
                          "lineNumber": 1294,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1295,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if validate_form_on_submit(form):\n",
                          "lineNumber": 1296,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if self.update_model(form, model):\n",
                          "lineNumber": 1297,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if '_continue_editing' in request.form:\n",
                          "lineNumber": 1298,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    flash(gettext('Model was successfully saved.'))\n",
                          "lineNumber": 1299,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(request.url)\n",
                          "lineNumber": 1300,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 1301,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(return_url)\n",
                          "lineNumber": 1302,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1303,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                          "lineNumber": 1304,
                          "lineChange": "none"
                        },
                        {
                          "line": "                             form_rules=self._form_create_rules)\n",
                          "lineNumber": 1305,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1306,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.render(self.edit_template,\n",
                          "lineNumber": 1307,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           model=model,\n",
                          "lineNumber": 1308,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form=form,\n",
                          "lineNumber": 1309,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form_opts=form_opts,\n",
                          "lineNumber": 1310,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           return_url=return_url)\n",
                          "lineNumber": 1311,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1312,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/delete/', methods=('POST',))\n",
                          "lineNumber": 1313,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def delete_view(self):\n",
                          "lineNumber": 1314,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1315,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Delete model view. Only POST method is allowed.\n",
                          "lineNumber": 1316,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1317,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                          "lineNumber": 1318,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        return_url = get_redirect_target() or url_for('.index_view')\n",
                          "lineNumber": 1318,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1319,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # TODO: Use post\n",
                          "lineNumber": 1320,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self.can_delete:\n",
                          "lineNumber": 1321,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1322,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1323,
                          "lineChange": "none"
                        },
                        {
                          "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                          "lineNumber": 1324,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if id is None:\n",
                          "lineNumber": 1325,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1326,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1327,
                          "lineChange": "none"
                        },
                        {
                          "line": "        model = self.get_one(id)\n",
                          "lineNumber": 1328,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1329,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if model:\n",
                          "lineNumber": 1330,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.delete_model(model)\n",
                          "lineNumber": 1331,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1332,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return redirect(return_url)\n",
                          "lineNumber": 1333,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/flask-admin/flask-admin/commit/4ec6473a720fc01a35ee4314cd41540f842fbf09?diff=split#diff-81459308eab181f696582f7b64e36fb5616b7106eeeae2d2284535d632106789L-1",
                      "lines": [
                        {
                          "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit\n",
                          "lineNumber": 13,
                          "lineChange": "removed"
                        },
                        {
                          "line": "from flask.ext.admin.helpers import get_form_data, validate_form_on_submit, get_redirect_target\n",
                          "lineNumber": 13,
                          "lineChange": "added"
                        },
                        {
                          "line": "from flask.ext.admin.tools import rec_getattr\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "from flask.ext.admin._backwards import ObsoleteAttr\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "from flask.ext.admin._compat import iteritems, as_unicode\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "from .helpers import prettify_name, get_mdict_item_or_list\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "from .ajax import AjaxModelLoader\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "try:\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "    from collections import OrderedDict\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "except ImportError:\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Bare-bones OrderedDict implementation for Python2.6 compatibility\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "    class OrderedDict(dict):\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def __init__(self, *args, **kwargs):\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "            dict.__init__(self, *args, **kwargs)\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.ordered_keys = []\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def __setitem__(self, key, value):\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.ordered_keys.append(key)\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "            dict.__setitem__(self, key, value)\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def __iter__(self):\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return (k for k in self.ordered_keys)\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def iteritems(self):\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return ((k, self[k]) for k in self.ordered_keys)\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def items(self):\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return list(self.iteritems())\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "class BaseModelView(BaseView, ActionsMixin):\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Base model view.\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "        This view does not make any assumptions on how models are stored or managed, but expects the following:\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "            1. The provided model is an object\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "            2. The model contains properties\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "            3. Each model contains an attribute which uniquely identifies it (i.e. a primary key for a database model)\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "            4. It is possible to retrieve a list of sorted models with pagination applied from a data source\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "            5. You can get one model by its identifier from the data source\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Essentially, if you want to support a new data store, all you have to do is:\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "            1. Derive from the `BaseModelView` class\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "            2. Implement various data-related methods (`get_list`, `get_one`, `create_model`, etc)\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "            3. Implement automatic form generation from the model representation (`scaffold_form`)\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Permissions\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    can_create = True\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Is model creation allowed\"\"\"\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "    can_edit = True\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Is model editing allowed\"\"\"\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "    can_delete = True\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Is model deletion allowed\"\"\"\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Templates\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    list_template = 'admin/model/list.html'\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Default list view template\"\"\"\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "    edit_template = 'admin/model/edit.html'\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Default edit template\"\"\"\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_template = 'admin/model/create.html'\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"Default create template\"\"\"\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Customizations\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_list = ObsoleteAttr('column_list', 'list_columns', None)\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the model field names for the list view.\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If set to `None`, will get them from the model.\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_list = ('name', 'last_name', 'email')\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_exclude_list = ObsoleteAttr('column_exclude_list',\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                       'excluded_list_columns', None)\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of excluded list column names.\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_exclude_list = ('last_name', 'email')\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 100,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_formatters = ObsoleteAttr('column_formatters', 'list_formatters', dict())\n",
                          "lineNumber": 101,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 102,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of list view column formatters.\n",
                          "lineNumber": 103,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 104,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example, if you want to show price multiplied by\n",
                          "lineNumber": 105,
                          "lineChange": "none"
                        },
                        {
                          "line": "        two, you can do something like this::\n",
                          "lineNumber": 106,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 107,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 108,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_formatters = dict(price=lambda v, c, m, p: m.price*2)\n",
                          "lineNumber": 109,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 110,
                          "lineChange": "none"
                        },
                        {
                          "line": "        or using Jinja2 `macro` in template::\n",
                          "lineNumber": 111,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 112,
                          "lineChange": "none"
                        },
                        {
                          "line": "            from flask.ext.admin.model.template import macro\n",
                          "lineNumber": 113,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 114,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 115,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_formatters = dict(price=macro('render_price'))\n",
                          "lineNumber": 116,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 117,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # in template\n",
                          "lineNumber": 118,
                          "lineChange": "none"
                        },
                        {
                          "line": "            {% macro render_price(model, column) %}\n",
                          "lineNumber": 119,
                          "lineChange": "none"
                        },
                        {
                          "line": "                {{ model.price * 2 }}\n",
                          "lineNumber": 120,
                          "lineChange": "none"
                        },
                        {
                          "line": "            {% endmacro %}\n",
                          "lineNumber": 121,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 122,
                          "lineChange": "none"
                        },
                        {
                          "line": "        The Callback function has the prototype::\n",
                          "lineNumber": 123,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 124,
                          "lineChange": "none"
                        },
                        {
                          "line": "            def formatter(view, context, model, name):\n",
                          "lineNumber": 125,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `view` is current administrative view\n",
                          "lineNumber": 126,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `context` is instance of jinja2.runtime.Context\n",
                          "lineNumber": 127,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `model` is model instance\n",
                          "lineNumber": 128,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `name` is property name\n",
                          "lineNumber": 129,
                          "lineChange": "none"
                        },
                        {
                          "line": "                pass\n",
                          "lineNumber": 130,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 131,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 132,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_type_formatters = ObsoleteAttr('column_type_formatters', 'list_type_formatters', None)\n",
                          "lineNumber": 133,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 134,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of value type formatters to be used in the list view.\n",
                          "lineNumber": 135,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 136,
                          "lineChange": "none"
                        },
                        {
                          "line": "        By default, two types are formatted:\n",
                          "lineNumber": 137,
                          "lineChange": "none"
                        },
                        {
                          "line": "        1. ``None`` will be displayed as an empty string\n",
                          "lineNumber": 138,
                          "lineChange": "none"
                        },
                        {
                          "line": "        2. ``bool`` will be displayed as a checkmark if it is ``True``\n",
                          "lineNumber": 139,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 140,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you don't like the default behavior and don't want any type formatters\n",
                          "lineNumber": 141,
                          "lineChange": "none"
                        },
                        {
                          "line": "        applied, just override this property with an empty dictionary::\n",
                          "lineNumber": 142,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 143,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 144,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_type_formatters = dict()\n",
                          "lineNumber": 145,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 146,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you want to display `NULL` instead of an empty string, you can do\n",
                          "lineNumber": 147,
                          "lineChange": "none"
                        },
                        {
                          "line": "        something like this::\n",
                          "lineNumber": 148,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 149,
                          "lineChange": "none"
                        },
                        {
                          "line": "            from flask.ext.admin.model import typefmt\n",
                          "lineNumber": 150,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 151,
                          "lineChange": "none"
                        },
                        {
                          "line": "            MY_DEFAULT_FORMATTERS = dict(typefmt.BASE_FORMATTERS)\n",
                          "lineNumber": 152,
                          "lineChange": "none"
                        },
                        {
                          "line": "            MY_DEFAULT_FORMATTERS.update({\n",
                          "lineNumber": 153,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    type(None): typefmt.null_formatter\n",
                          "lineNumber": 154,
                          "lineChange": "none"
                        },
                        {
                          "line": "                })\n",
                          "lineNumber": 155,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 156,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 157,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_type_formatters = MY_DEFAULT_FORMATTERS\n",
                          "lineNumber": 158,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 159,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Type formatters have lower priority than list column formatters.\n",
                          "lineNumber": 160,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 161,
                          "lineChange": "none"
                        },
                        {
                          "line": "        The callback function has following prototype::\n",
                          "lineNumber": 162,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 163,
                          "lineChange": "none"
                        },
                        {
                          "line": "            def type_formatter(view, value):\n",
                          "lineNumber": 164,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `view` is current administrative view\n",
                          "lineNumber": 165,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # `value` value to format\n",
                          "lineNumber": 166,
                          "lineChange": "none"
                        },
                        {
                          "line": "                pass\n",
                          "lineNumber": 167,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 168,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 169,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_labels = ObsoleteAttr('column_labels', 'rename_columns', None)\n",
                          "lineNumber": 170,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 171,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary where key is column name and value is string to display.\n",
                          "lineNumber": 172,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 173,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 174,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 175,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 176,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_labels = dict(name='Name', last_name='Last Name')\n",
                          "lineNumber": 177,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 178,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 179,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_descriptions = None\n",
                          "lineNumber": 180,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 181,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary where key is column name and\n",
                          "lineNumber": 182,
                          "lineChange": "none"
                        },
                        {
                          "line": "        value is description for `list view` column or add/edit form field.\n",
                          "lineNumber": 183,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 184,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 185,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 186,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 187,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_descriptions = dict(\n",
                          "lineNumber": 188,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    full_name='First and Last name'\n",
                          "lineNumber": 189,
                          "lineChange": "none"
                        },
                        {
                          "line": "                )\n",
                          "lineNumber": 190,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 191,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 192,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_sortable_list = ObsoleteAttr('column_sortable_list',\n",
                          "lineNumber": 193,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                        'sortable_columns',\n",
                          "lineNumber": 194,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                        None)\n",
                          "lineNumber": 195,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 196,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the sortable columns for the list view.\n",
                          "lineNumber": 197,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If set to `None`, will get them from the model.\n",
                          "lineNumber": 198,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 199,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 200,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 201,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 202,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_sortable_list = ('name', 'last_name')\n",
                          "lineNumber": 203,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 204,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you want to explicitly specify field/column to be used while\n",
                          "lineNumber": 205,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sorting, you can use a tuple::\n",
                          "lineNumber": 206,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 207,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 208,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_sortable_list = ('name', ('user', 'user.username'))\n",
                          "lineNumber": 209,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 210,
                          "lineChange": "none"
                        },
                        {
                          "line": "        When using SQLAlchemy models, model attributes can be used instead\n",
                          "lineNumber": 211,
                          "lineChange": "none"
                        },
                        {
                          "line": "        of strings::\n",
                          "lineNumber": 212,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 213,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 214,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_sortable_list = ('name', ('user', User.username))\n",
                          "lineNumber": 215,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 216,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 217,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_default_sort = None\n",
                          "lineNumber": 218,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 219,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Default sort column if no sorting is applied.\n",
                          "lineNumber": 220,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 221,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 222,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 223,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 224,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_default_sort = 'user'\n",
                          "lineNumber": 225,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 226,
                          "lineChange": "none"
                        },
                        {
                          "line": "        You can use tuple to control ascending descending order. In following example, items\n",
                          "lineNumber": 227,
                          "lineChange": "none"
                        },
                        {
                          "line": "        will be sorted in descending order::\n",
                          "lineNumber": 228,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 229,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 230,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_default_sort = ('user', True)\n",
                          "lineNumber": 231,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 232,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 233,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_searchable_list = ObsoleteAttr('column_searchable_list',\n",
                          "lineNumber": 234,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          'searchable_columns',\n",
                          "lineNumber": 235,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          None)\n",
                          "lineNumber": 236,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 237,
                          "lineChange": "none"
                        },
                        {
                          "line": "        A collection of the searchable columns. It is assumed that only\n",
                          "lineNumber": 238,
                          "lineChange": "none"
                        },
                        {
                          "line": "        text-only fields are searchable, but it is up to the model\n",
                          "lineNumber": 239,
                          "lineChange": "none"
                        },
                        {
                          "line": "        implementation to decide.\n",
                          "lineNumber": 240,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 241,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 242,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 243,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 244,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_searchable_list = ('name', 'email')\n",
                          "lineNumber": 245,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 246,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 247,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_choices = None\n",
                          "lineNumber": 248,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 249,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Map choices to columns in list view\n",
                          "lineNumber": 250,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 251,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 252,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 253,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 254,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_choices = {\n",
                          "lineNumber": 255,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'my_column': [\n",
                          "lineNumber": 256,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        ('db_value', 'display_value'),\n",
                          "lineNumber": 257,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    ]\n",
                          "lineNumber": 258,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 259,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 260,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 261,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_filters = None\n",
                          "lineNumber": 262,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 263,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the column filters.\n",
                          "lineNumber": 264,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 265,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Can contain either field names or instances of :class:`~flask.ext.admin.model.filters.BaseFilter` classes.\n",
                          "lineNumber": 266,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 267,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 268,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 269,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 270,
                          "lineChange": "none"
                        },
                        {
                          "line": "                column_filters = ('user', 'email')\n",
                          "lineNumber": 271,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 272,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \n",
                          "lineNumber": 273,
                          "lineChange": "none"
                        },
                        {
                          "line": "    named_filter_urls = False\n",
                          "lineNumber": 274,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 275,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Set to True to use human-readable names for filters in URL parameters.\n",
                          "lineNumber": 276,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 277,
                          "lineChange": "none"
                        },
                        {
                          "line": "        False by default so as to be robust across translations.\n",
                          "lineNumber": 278,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 279,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Changing this parameter will break any existing URLs.\n",
                          "lineNumber": 280,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 281,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Override unique_filter_label() if you want to change the default format\n",
                          "lineNumber": 282,
                          "lineChange": "none"
                        },
                        {
                          "line": "        of filter urls. This parameter only controls the default method.\n",
                          "lineNumber": 283,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 284,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 285,
                          "lineChange": "none"
                        },
                        {
                          "line": "    column_display_pk = ObsoleteAttr('column_display_pk',\n",
                          "lineNumber": 286,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                     'list_display_pk',\n",
                          "lineNumber": 287,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                     False)\n",
                          "lineNumber": 288,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 289,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Controls if the primary key should be displayed in the list view.\n",
                          "lineNumber": 290,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 291,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 292,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form = None\n",
                          "lineNumber": 293,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 294,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Form class. Override if you want to use custom form for your model.\n",
                          "lineNumber": 295,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Will completely disable form scaffolding functionality.\n",
                          "lineNumber": 296,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 297,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 298,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 299,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyForm(Form):\n",
                          "lineNumber": 300,
                          "lineChange": "none"
                        },
                        {
                          "line": "                name = TextField('Name')\n",
                          "lineNumber": 301,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 302,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 303,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form = MyForm\n",
                          "lineNumber": 304,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 305,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 306,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_base_class = BaseForm\n",
                          "lineNumber": 307,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 308,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Base form class. Will be used by form scaffolding function when creating model form.\n",
                          "lineNumber": 309,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 310,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Useful if you want to have custom contructor or override some fields.\n",
                          "lineNumber": 311,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 312,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 313,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 314,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyBaseForm(Form):\n",
                          "lineNumber": 315,
                          "lineChange": "none"
                        },
                        {
                          "line": "                def do_something(self):\n",
                          "lineNumber": 316,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    pass\n",
                          "lineNumber": 317,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 318,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 319,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_base_class = MyBaseForm\n",
                          "lineNumber": 320,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 321,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 322,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 323,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_args = None\n",
                          "lineNumber": 324,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 325,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of form field arguments. Refer to WTForms documentation for\n",
                          "lineNumber": 326,
                          "lineChange": "none"
                        },
                        {
                          "line": "        list of possible options.\n",
                          "lineNumber": 327,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 328,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 329,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 330,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 331,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_args = dict(\n",
                          "lineNumber": 332,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    name=dict(label='First Name', validators=[required()])\n",
                          "lineNumber": 333,
                          "lineChange": "none"
                        },
                        {
                          "line": "                )\n",
                          "lineNumber": 334,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 335,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 336,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_columns = None\n",
                          "lineNumber": 337,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 338,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of the model field names for the form. If set to `None` will\n",
                          "lineNumber": 339,
                          "lineChange": "none"
                        },
                        {
                          "line": "        get them from the model.\n",
                          "lineNumber": 340,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 341,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 342,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 343,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 344,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_columns = ('name', 'email')\n",
                          "lineNumber": 345,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 346,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 347,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_excluded_columns = ObsoleteAttr('form_excluded_columns',\n",
                          "lineNumber": 348,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                         'excluded_form_columns',\n",
                          "lineNumber": 349,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                         None)\n",
                          "lineNumber": 350,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 351,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Collection of excluded form field names.\n",
                          "lineNumber": 352,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 353,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example::\n",
                          "lineNumber": 354,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 355,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 356,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_excluded_columns = ('last_name', 'email')\n",
                          "lineNumber": 357,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 358,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 359,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_overrides = None\n",
                          "lineNumber": 360,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 361,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of form column overrides.\n",
                          "lineNumber": 362,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 363,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 364,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 365,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 366,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_overrides = dict(name=wtf.FileField)\n",
                          "lineNumber": 367,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 368,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 369,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_widget_args = None\n",
                          "lineNumber": 370,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 371,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of form widget rendering arguments.\n",
                          "lineNumber": 372,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Use this to customize how widget is rendered without using custom template.\n",
                          "lineNumber": 373,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 374,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 375,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 376,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 377,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_widget_args = {\n",
                          "lineNumber": 378,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'description': {\n",
                          "lineNumber": 379,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'rows': 10,\n",
                          "lineNumber": 380,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'style': 'color: black'\n",
                          "lineNumber": 381,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    }\n",
                          "lineNumber": 382,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 383,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 384,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 385,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_extra_fields = None\n",
                          "lineNumber": 386,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 387,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Dictionary of additional fields.\n",
                          "lineNumber": 388,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 389,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Example::\n",
                          "lineNumber": 390,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 391,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 392,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_extra_fields = {\n",
                          "lineNumber": 393,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    password: PasswordField('Password')\n",
                          "lineNumber": 394,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 395,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 396,
                          "lineChange": "none"
                        },
                        {
                          "line": "        You can control order of form fields using ``form_columns`` property. For example::\n",
                          "lineNumber": 397,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 398,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 399,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_columns = ('name', 'email', 'password', 'secret')\n",
                          "lineNumber": 400,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 401,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_extra_fields = {\n",
                          "lineNumber": 402,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    password: PasswordField('Password')\n",
                          "lineNumber": 403,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 404,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 405,
                          "lineChange": "none"
                        },
                        {
                          "line": "        In this case, password field will be put between email and secret fields that are autogenerated.\n",
                          "lineNumber": 406,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 407,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 408,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_ajax_refs = None\n",
                          "lineNumber": 409,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 410,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Use AJAX for foreign key model loading.\n",
                          "lineNumber": 411,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 412,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Should contain dictionary, where key is field name and value is either a dictionary which\n",
                          "lineNumber": 413,
                          "lineChange": "none"
                        },
                        {
                          "line": "        configures AJAX lookups or backend-specific `AjaxModelLoader` class instance.\n",
                          "lineNumber": 414,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 415,
                          "lineChange": "none"
                        },
                        {
                          "line": "        For example, it can look like::\n",
                          "lineNumber": 416,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 417,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 418,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_ajax_refs = {\n",
                          "lineNumber": 419,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'user': {\n",
                          "lineNumber": 420,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'fields': ('first_name', 'last_name', 'email')\n",
                          "lineNumber": 421,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        'page_size': 10\n",
                          "lineNumber": 422,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    }\n",
                          "lineNumber": 423,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 424,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 425,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Or with SQLAlchemy backend like this::\n",
                          "lineNumber": 426,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 427,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 428,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_ajax_refs = {\n",
                          "lineNumber": 429,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'user': QueryAjaxModelLoader('user', db.session, User, fields=['email'], page_size=10)\n",
                          "lineNumber": 430,
                          "lineChange": "none"
                        },
                        {
                          "line": "                }\n",
                          "lineNumber": 431,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 432,
                          "lineChange": "none"
                        },
                        {
                          "line": "        If you need custom loading functionality, you can implement your custom loading behavior\n",
                          "lineNumber": 433,
                          "lineChange": "none"
                        },
                        {
                          "line": "        in your `AjaxModelLoader` class.\n",
                          "lineNumber": 434,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 435,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 436,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_rules = None\n",
                          "lineNumber": 437,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 438,
                          "lineChange": "none"
                        },
                        {
                          "line": "        List of rendering rules for model creation form.\n",
                          "lineNumber": 439,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 440,
                          "lineChange": "none"
                        },
                        {
                          "line": "        This property changed default form rendering behavior and makes possible to rearrange order\n",
                          "lineNumber": 441,
                          "lineChange": "none"
                        },
                        {
                          "line": "        of rendered fields, add some text between fields, group them, etc. If not set, will use\n",
                          "lineNumber": 442,
                          "lineChange": "none"
                        },
                        {
                          "line": "        default Flask-Admin form rendering logic.\n",
                          "lineNumber": 443,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 444,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Here's simple example which illustrates how to use::\n",
                          "lineNumber": 445,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 446,
                          "lineChange": "none"
                        },
                        {
                          "line": "            from flask.ext.admin.form import rules\n",
                          "lineNumber": 447,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 448,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(ModelView):\n",
                          "lineNumber": 449,
                          "lineChange": "none"
                        },
                        {
                          "line": "                form_rules = [\n",
                          "lineNumber": 450,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # Define field set with header text and four fields\n",
                          "lineNumber": 451,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.FieldSet(('first_name', 'last_name', 'email', 'phone'), 'User'),\n",
                          "lineNumber": 452,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # ... and it is just shortcut for:\n",
                          "lineNumber": 453,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Header('User'),\n",
                          "lineNumber": 454,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Field('first_name'),\n",
                          "lineNumber": 455,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Field('last_name'),\n",
                          "lineNumber": 456,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # ...\n",
                          "lineNumber": 457,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # It is possible to create custom rule blocks:\n",
                          "lineNumber": 458,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    MyBlock('Hello World'),\n",
                          "lineNumber": 459,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # It is possible to call macros from current context\n",
                          "lineNumber": 460,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    rules.Macro('my_macro', foobar='baz')\n",
                          "lineNumber": 461,
                          "lineChange": "none"
                        },
                        {
                          "line": "                ]\n",
                          "lineNumber": 462,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 463,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 464,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_edit_rules = None\n",
                          "lineNumber": 465,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 466,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Customized rules for the edit form. Override `form_rules` if present.\n",
                          "lineNumber": 467,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 468,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 469,
                          "lineChange": "none"
                        },
                        {
                          "line": "    form_create_rules = None\n",
                          "lineNumber": 470,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 471,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Customized rules for the create form. Override `form_rules` if present.\n",
                          "lineNumber": 472,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 473,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 474,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Actions\n",
                          "lineNumber": 475,
                          "lineChange": "none"
                        },
                        {
                          "line": "    action_disallowed_list = ObsoleteAttr('action_disallowed_list',\n",
                          "lineNumber": 476,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          'disallowed_actions',\n",
                          "lineNumber": 477,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                          [])\n",
                          "lineNumber": 478,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 479,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Set of disallowed action names. For example, if you want to disable\n",
                          "lineNumber": 480,
                          "lineChange": "none"
                        },
                        {
                          "line": "        mass model deletion, do something like this:\n",
                          "lineNumber": 481,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 482,
                          "lineChange": "none"
                        },
                        {
                          "line": "            class MyModelView(BaseModelView):\n",
                          "lineNumber": 483,
                          "lineChange": "none"
                        },
                        {
                          "line": "                action_disallowed_list = ['delete']\n",
                          "lineNumber": 484,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 485,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 486,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Various settings\n",
                          "lineNumber": 487,
                          "lineChange": "none"
                        },
                        {
                          "line": "    page_size = 20\n",
                          "lineNumber": 488,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 489,
                          "lineChange": "none"
                        },
                        {
                          "line": "        Default page size for pagination.\n",
                          "lineNumber": 490,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 491,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 492,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def __init__(self, model,\n",
                          "lineNumber": 493,
                          "lineChange": "none"
                        },
                        {
                          "line": "                 name=None, category=None, endpoint=None, url=None):\n",
                          "lineNumber": 494,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 495,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Constructor.\n",
                          "lineNumber": 496,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 497,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 498,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model class\n",
                          "lineNumber": 499,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 500,
                          "lineChange": "none"
                        },
                        {
                          "line": "                View name. If not provided, will use the model class name\n",
                          "lineNumber": 501,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param category:\n",
                          "lineNumber": 502,
                          "lineChange": "none"
                        },
                        {
                          "line": "                View category\n",
                          "lineNumber": 503,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param endpoint:\n",
                          "lineNumber": 504,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Base endpoint. If not provided, will use the model name + 'view'.\n",
                          "lineNumber": 505,
                          "lineChange": "none"
                        },
                        {
                          "line": "                For example if model name was 'User', endpoint will be\n",
                          "lineNumber": 506,
                          "lineChange": "none"
                        },
                        {
                          "line": "                'userview'\n",
                          "lineNumber": 507,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param url:\n",
                          "lineNumber": 508,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Base URL. If not provided, will use endpoint as a URL.\n",
                          "lineNumber": 509,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param debug:\n",
                          "lineNumber": 510,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Enable debugging mode. Won't catch exceptions on model\n",
                          "lineNumber": 511,
                          "lineChange": "none"
                        },
                        {
                          "line": "                save failures.\n",
                          "lineNumber": 512,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 513,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 514,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # If name not provided, it is model name\n",
                          "lineNumber": 515,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if name is None:\n",
                          "lineNumber": 516,
                          "lineChange": "none"
                        },
                        {
                          "line": "            name = '%s' % self._prettify_class_name(model.__name__)\n",
                          "lineNumber": 517,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 518,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # If endpoint not provided, it is model name + 'view'\n",
                          "lineNumber": 519,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if endpoint is None:\n",
                          "lineNumber": 520,
                          "lineChange": "none"
                        },
                        {
                          "line": "            endpoint = ('%sview' % model.__name__).lower()\n",
                          "lineNumber": 521,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 522,
                          "lineChange": "none"
                        },
                        {
                          "line": "        super(BaseModelView, self).__init__(name, category, endpoint, url)\n",
                          "lineNumber": 523,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 524,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.model = model\n",
                          "lineNumber": 525,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 526,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Actions\n",
                          "lineNumber": 527,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.init_actions()\n",
                          "lineNumber": 528,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 529,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Scaffolding\n",
                          "lineNumber": 530,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._refresh_cache()\n",
                          "lineNumber": 531,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 532,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Caching\n",
                          "lineNumber": 533,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _refresh_cache(self):\n",
                          "lineNumber": 534,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 535,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Refresh various cached variables.\n",
                          "lineNumber": 536,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 537,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # List view\n",
                          "lineNumber": 538,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._list_columns = self.get_list_columns()\n",
                          "lineNumber": 539,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._sortable_columns = self.get_sortable_columns()\n",
                          "lineNumber": 540,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 541,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Labels\n",
                          "lineNumber": 542,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_labels is None:\n",
                          "lineNumber": 543,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_labels = {}\n",
                          "lineNumber": 544,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 545,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Forms\n",
                          "lineNumber": 546,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._form_ajax_refs = self._process_ajax_references()\n",
                          "lineNumber": 547,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 548,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_widget_args is None:\n",
                          "lineNumber": 549,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.form_widget_args = {}\n",
                          "lineNumber": 550,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 551,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._create_form_class = self.get_create_form()\n",
                          "lineNumber": 552,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._edit_form_class = self.get_edit_form()\n",
                          "lineNumber": 553,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 554,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Search\n",
                          "lineNumber": 555,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._search_supported = self.init_search()\n",
                          "lineNumber": 556,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 557,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Choices\n",
                          "lineNumber": 558,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_choices:\n",
                          "lineNumber": 559,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._column_choices_map = dict([\n",
                          "lineNumber": 560,
                          "lineChange": "none"
                        },
                        {
                          "line": "                (column, dict(choices))\n",
                          "lineNumber": 561,
                          "lineChange": "none"
                        },
                        {
                          "line": "                for column, choices in self.column_choices.items()\n",
                          "lineNumber": 562,
                          "lineChange": "none"
                        },
                        {
                          "line": "            ])\n",
                          "lineNumber": 563,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 564,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_choices = self._column_choices_map = dict()\n",
                          "lineNumber": 565,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 566,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Filters\n",
                          "lineNumber": 567,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self._filters = self.get_filters()\n",
                          "lineNumber": 568,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 569,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Type formatters\n",
                          "lineNumber": 570,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_type_formatters is None:\n",
                          "lineNumber": 571,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_type_formatters = dict(typefmt.BASE_FORMATTERS)\n",
                          "lineNumber": 572,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 573,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_descriptions is None:\n",
                          "lineNumber": 574,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.column_descriptions = dict()\n",
                          "lineNumber": 575,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 576,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self._filters:\n",
                          "lineNumber": 577,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._flattened_filters_by_group = OrderedDict()\n",
                          "lineNumber": 578,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 579,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for flt in self._filters:\n",
                          "lineNumber": 580,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if flt.name not in self._flattened_filters_by_group:\n",
                          "lineNumber": 581,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    self._flattened_filters_by_group[flt.name] = []\n",
                          "lineNumber": 582,
                          "lineChange": "none"
                        },
                        {
                          "line": "                group = self._flattened_filters_by_group[flt.name]\n",
                          "lineNumber": 583,
                          "lineChange": "none"
                        },
                        {
                          "line": "                group.append({'name': flt.name,\n",
                          "lineNumber": 584,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'label': self.unique_filter_label(flt),\n",
                          "lineNumber": 585,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'operation': flt.operation(),\n",
                          "lineNumber": 586,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'options': flt.get_options(self) or None,\n",
                          "lineNumber": 587,
                          "lineChange": "none"
                        },
                        {
                          "line": "                              'data_type': flt.data_type})\n",
                          "lineNumber": 588,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 589,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._flattened_filters_by_group = None\n",
                          "lineNumber": 590,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 591,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Form rendering rules\n",
                          "lineNumber": 592,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_create_rules:\n",
                          "lineNumber": 593,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_create_rules = rules.RuleSet(self, self.form_create_rules)\n",
                          "lineNumber": 594,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 595,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_create_rules = None\n",
                          "lineNumber": 596,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 597,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_edit_rules:\n",
                          "lineNumber": 598,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_edit_rules = rules.RuleSet(self, self.form_edit_rules)\n",
                          "lineNumber": 599,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 600,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self._form_edit_rules = None\n",
                          "lineNumber": 601,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 602,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_rules:\n",
                          "lineNumber": 603,
                          "lineChange": "none"
                        },
                        {
                          "line": "            form_rules = rules.RuleSet(self, self.form_rules)\n",
                          "lineNumber": 604,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 605,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if not self._form_create_rules:\n",
                          "lineNumber": 606,
                          "lineChange": "none"
                        },
                        {
                          "line": "                self._form_create_rules = form_rules\n",
                          "lineNumber": 607,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 608,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if not self._form_edit_rules:\n",
                          "lineNumber": 609,
                          "lineChange": "none"
                        },
                        {
                          "line": "                self._form_edit_rules = form_rules\n",
                          "lineNumber": 610,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 611,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Primary key\n",
                          "lineNumber": 612,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_pk_value(self, model):\n",
                          "lineNumber": 613,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 614,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return PK value from a model object.\n",
                          "lineNumber": 615,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 616,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 617,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 618,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # List view\n",
                          "lineNumber": 619,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_list_columns(self):\n",
                          "lineNumber": 620,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 621,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return list of the model field names. Must be implemented in\n",
                          "lineNumber": 622,
                          "lineChange": "none"
                        },
                        {
                          "line": "            the child class.\n",
                          "lineNumber": 623,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 624,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Expected return format is list of tuples with field name and\n",
                          "lineNumber": 625,
                          "lineChange": "none"
                        },
                        {
                          "line": "            display text. For example::\n",
                          "lineNumber": 626,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 627,
                          "lineChange": "none"
                        },
                        {
                          "line": "                ['name', 'first_name', 'last_name']\n",
                          "lineNumber": 628,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 629,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement scaffold_list_columns method')\n",
                          "lineNumber": 630,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 631,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_column_name(self, field):\n",
                          "lineNumber": 632,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 633,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return a human-readable column name.\n",
                          "lineNumber": 634,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 635,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param field:\n",
                          "lineNumber": 636,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model field name.\n",
                          "lineNumber": 637,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 638,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_labels and field in self.column_labels:\n",
                          "lineNumber": 639,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self.column_labels[field]\n",
                          "lineNumber": 640,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 641,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self._prettify_name(field)\n",
                          "lineNumber": 642,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 643,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_list_columns(self):\n",
                          "lineNumber": 644,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 645,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns a list of the model field names. If `column_list` was\n",
                          "lineNumber": 646,
                          "lineChange": "none"
                        },
                        {
                          "line": "            set, returns it. Otherwise calls `scaffold_list_columns`\n",
                          "lineNumber": 647,
                          "lineChange": "none"
                        },
                        {
                          "line": "            to generate the list from the model.\n",
                          "lineNumber": 648,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 649,
                          "lineChange": "none"
                        },
                        {
                          "line": "        columns = self.column_list\n",
                          "lineNumber": 650,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 651,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if columns is None:\n",
                          "lineNumber": 652,
                          "lineChange": "none"
                        },
                        {
                          "line": "            columns = self.scaffold_list_columns()\n",
                          "lineNumber": 653,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 654,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # Filter excluded columns\n",
                          "lineNumber": 655,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if self.column_exclude_list:\n",
                          "lineNumber": 656,
                          "lineChange": "none"
                        },
                        {
                          "line": "                columns = [c for c in columns if c not in self.column_exclude_list]\n",
                          "lineNumber": 657,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 658,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return [(c, self.get_column_name(c)) for c in columns]\n",
                          "lineNumber": 659,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 660,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_sortable_columns(self):\n",
                          "lineNumber": 661,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 662,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns dictionary of sortable columns. Must be implemented in\n",
                          "lineNumber": 663,
                          "lineChange": "none"
                        },
                        {
                          "line": "            the child class.\n",
                          "lineNumber": 664,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 665,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Expected return format is a dictionary, where keys are field names and\n",
                          "lineNumber": 666,
                          "lineChange": "none"
                        },
                        {
                          "line": "            values are property names.\n",
                          "lineNumber": 667,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 668,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement scaffold_sortable_columns method')\n",
                          "lineNumber": 669,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 670,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_sortable_columns(self):\n",
                          "lineNumber": 671,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 672,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns a dictionary of the sortable columns. Key is a model\n",
                          "lineNumber": 673,
                          "lineChange": "none"
                        },
                        {
                          "line": "            field name and value is sort column (for example - attribute).\n",
                          "lineNumber": 674,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 675,
                          "lineChange": "none"
                        },
                        {
                          "line": "            If `column_sortable_list` is set, will use it. Otherwise, will call\n",
                          "lineNumber": 676,
                          "lineChange": "none"
                        },
                        {
                          "line": "            `scaffold_sortable_columns` to get them from the model.\n",
                          "lineNumber": 677,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 678,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_sortable_list is None:\n",
                          "lineNumber": 679,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self.scaffold_sortable_columns() or dict()\n",
                          "lineNumber": 680,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 681,
                          "lineChange": "none"
                        },
                        {
                          "line": "            result = dict()\n",
                          "lineNumber": 682,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 683,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for c in self.column_sortable_list:\n",
                          "lineNumber": 684,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if isinstance(c, tuple):\n",
                          "lineNumber": 685,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[c[0]] = c[1]\n",
                          "lineNumber": 686,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 687,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[c] = c\n",
                          "lineNumber": 688,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 689,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return result\n",
                          "lineNumber": 690,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 691,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def init_search(self):\n",
                          "lineNumber": 692,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 693,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Initialize search. If data provider does not support search,\n",
                          "lineNumber": 694,
                          "lineChange": "none"
                        },
                        {
                          "line": "            `init_search` will return `False`.\n",
                          "lineNumber": 695,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 696,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return False\n",
                          "lineNumber": 697,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 698,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_filters(self, name):\n",
                          "lineNumber": 699,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 700,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Generate filter object for the given name\n",
                          "lineNumber": 701,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 702,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 703,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Name of the field\n",
                          "lineNumber": 704,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 705,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return None\n",
                          "lineNumber": 706,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 707,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def is_valid_filter(self, filter):\n",
                          "lineNumber": 708,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 709,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Verify that the provided filter object is valid.\n",
                          "lineNumber": 710,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 711,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override in model backend implementation to verify if\n",
                          "lineNumber": 712,
                          "lineChange": "none"
                        },
                        {
                          "line": "            the provided filter type is allowed.\n",
                          "lineNumber": 713,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 714,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param filter:\n",
                          "lineNumber": 715,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Filter object to verify.\n",
                          "lineNumber": 716,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 717,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return isinstance(filter, filters.BaseFilter)\n",
                          "lineNumber": 718,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 719,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_filters(self):\n",
                          "lineNumber": 720,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 721,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return a list of filter objects.\n",
                          "lineNumber": 722,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 723,
                          "lineChange": "none"
                        },
                        {
                          "line": "            If your model backend implementation does not support filters,\n",
                          "lineNumber": 724,
                          "lineChange": "none"
                        },
                        {
                          "line": "            override this method and return `None`.\n",
                          "lineNumber": 725,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 726,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_filters:\n",
                          "lineNumber": 727,
                          "lineChange": "none"
                        },
                        {
                          "line": "            collection = []\n",
                          "lineNumber": 728,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 729,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for n in self.column_filters:\n",
                          "lineNumber": 730,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if self.is_valid_filter(n):\n",
                          "lineNumber": 731,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    collection.append(n)\n",
                          "lineNumber": 732,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 733,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    flt = self.scaffold_filters(n)\n",
                          "lineNumber": 734,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    if flt:\n",
                          "lineNumber": 735,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        collection.extend(flt)\n",
                          "lineNumber": 736,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    else:\n",
                          "lineNumber": 737,
                          "lineChange": "none"
                        },
                        {
                          "line": "                        raise Exception('Unsupported filter type %s' % n)\n",
                          "lineNumber": 738,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return collection\n",
                          "lineNumber": 739,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 740,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 741,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 742,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def scaffold_form(self):\n",
                          "lineNumber": 743,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 744,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create `form.BaseForm` inherited class from the model. Must be\n",
                          "lineNumber": 745,
                          "lineChange": "none"
                        },
                        {
                          "line": "            implemented in the child class.\n",
                          "lineNumber": 746,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 747,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement scaffold_form method')\n",
                          "lineNumber": 748,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 749,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_form(self):\n",
                          "lineNumber": 750,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 751,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Get form class.\n",
                          "lineNumber": 752,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 753,
                          "lineChange": "none"
                        },
                        {
                          "line": "            If ``self.form`` is set, will return it and will call\n",
                          "lineNumber": 754,
                          "lineChange": "none"
                        },
                        {
                          "line": "            ``self.scaffold_form`` otherwise.\n",
                          "lineNumber": 755,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 756,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement customized behavior.\n",
                          "lineNumber": 757,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 758,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form is not None:\n",
                          "lineNumber": 759,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self.form\n",
                          "lineNumber": 760,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 761,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.scaffold_form()\n",
                          "lineNumber": 762,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 763,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_create_form(self):\n",
                          "lineNumber": 764,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 765,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create form class for model creation view.\n",
                          "lineNumber": 766,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 767,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement customized behavior.\n",
                          "lineNumber": 768,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 769,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.get_form()\n",
                          "lineNumber": 770,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 771,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_edit_form(self):\n",
                          "lineNumber": 772,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 773,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create form class for model editing view.\n",
                          "lineNumber": 774,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 775,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement customized behavior.\n",
                          "lineNumber": 776,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 777,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.get_form()\n",
                          "lineNumber": 778,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 779,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def create_form(self, obj=None):\n",
                          "lineNumber": 780,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 781,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Instantiate model creation form and return it.\n",
                          "lineNumber": 782,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 783,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement custom behavior.\n",
                          "lineNumber": 784,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 785,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self._create_form_class(get_form_data(), obj=obj)\n",
                          "lineNumber": 786,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 787,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def edit_form(self, obj=None):\n",
                          "lineNumber": 788,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 789,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Instantiate model editing form and return it.\n",
                          "lineNumber": 790,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 791,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override to implement custom behavior.\n",
                          "lineNumber": 792,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 793,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self._edit_form_class(get_form_data(), obj=obj)\n",
                          "lineNumber": 794,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 795,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Helpers\n",
                          "lineNumber": 796,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def is_sortable(self, name):\n",
                          "lineNumber": 797,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 798,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Verify if column is sortable.\n",
                          "lineNumber": 799,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 800,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 801,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Column name.\n",
                          "lineNumber": 802,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 803,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return name in self._sortable_columns\n",
                          "lineNumber": 804,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 805,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_column_by_idx(self, idx):\n",
                          "lineNumber": 806,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 807,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return column index by\n",
                          "lineNumber": 808,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 809,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if idx is None or idx < 0 or idx >= len(self._list_columns):\n",
                          "lineNumber": 810,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 811,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 812,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self._list_columns[idx]\n",
                          "lineNumber": 813,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 814,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_default_order(self):\n",
                          "lineNumber": 815,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 816,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return default sort order\n",
                          "lineNumber": 817,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 818,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.column_default_sort:\n",
                          "lineNumber": 819,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if isinstance(self.column_default_sort, tuple):\n",
                          "lineNumber": 820,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return self.column_default_sort\n",
                          "lineNumber": 821,
                          "lineChange": "none"
                        },
                        {
                          "line": "            else:\n",
                          "lineNumber": 822,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return self.column_default_sort, False\n",
                          "lineNumber": 823,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 824,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return None\n",
                          "lineNumber": 825,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 826,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Database-related API\n",
                          "lineNumber": 827,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_list(self, page, sort_field, sort_desc, search, filters):\n",
                          "lineNumber": 828,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 829,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return a paginated and sorted list of models from the data source.\n",
                          "lineNumber": 830,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 831,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 832,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 833,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param page:\n",
                          "lineNumber": 834,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Page number, 0 based. Can be set to None if it is first page.\n",
                          "lineNumber": 835,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort_field:\n",
                          "lineNumber": 836,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Sort column name or None.\n",
                          "lineNumber": 837,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort_desc:\n",
                          "lineNumber": 838,
                          "lineChange": "none"
                        },
                        {
                          "line": "                If set to True, sorting is in descending order.\n",
                          "lineNumber": 839,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param search:\n",
                          "lineNumber": 840,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Search query\n",
                          "lineNumber": 841,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param filters:\n",
                          "lineNumber": 842,
                          "lineChange": "none"
                        },
                        {
                          "line": "                List of filter tuples. First value in a tuple is a search\n",
                          "lineNumber": 843,
                          "lineChange": "none"
                        },
                        {
                          "line": "                index, second value is a search value.\n",
                          "lineNumber": 844,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 845,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement get_list method')\n",
                          "lineNumber": 846,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 847,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_one(self, id):\n",
                          "lineNumber": 848,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 849,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return one model by its id.\n",
                          "lineNumber": 850,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 851,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 852,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 853,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param id:\n",
                          "lineNumber": 854,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model id\n",
                          "lineNumber": 855,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 856,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented('Please implement get_one method')\n",
                          "lineNumber": 857,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 858,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Model event handlers\n",
                          "lineNumber": 859,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def on_model_change(self, form, model, is_created):\n",
                          "lineNumber": 860,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 861,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Perform some actions after a model is created or updated.\n",
                          "lineNumber": 862,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 863,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Called from create_model and update_model in the same transaction\n",
                          "lineNumber": 864,
                          "lineChange": "none"
                        },
                        {
                          "line": "            (if it has any meaning for a store backend).\n",
                          "lineNumber": 865,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 866,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default does nothing.\n",
                          "lineNumber": 867,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 868,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 869,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form used to create/update model\n",
                          "lineNumber": 870,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 871,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model that will be created/updated\n",
                          "lineNumber": 872,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param is_created:\n",
                          "lineNumber": 873,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Will be set to True if model was created and to False if edited\n",
                          "lineNumber": 874,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 875,
                          "lineChange": "none"
                        },
                        {
                          "line": "        pass\n",
                          "lineNumber": 876,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 877,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _on_model_change(self, form, model, is_created):\n",
                          "lineNumber": 878,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 879,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Compatibility helper.\n",
                          "lineNumber": 880,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 881,
                          "lineChange": "none"
                        },
                        {
                          "line": "        try:\n",
                          "lineNumber": 882,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.on_model_change(form, model, is_created)\n",
                          "lineNumber": 883,
                          "lineChange": "none"
                        },
                        {
                          "line": "        except TypeError:\n",
                          "lineNumber": 884,
                          "lineChange": "none"
                        },
                        {
                          "line": "            msg = ('%s.on_model_change() now accepts third ' +\n",
                          "lineNumber": 885,
                          "lineChange": "none"
                        },
                        {
                          "line": "                   'parameter is_created. Please update your code') % self.model\n",
                          "lineNumber": 886,
                          "lineChange": "none"
                        },
                        {
                          "line": "            warnings.warn(msg)\n",
                          "lineNumber": 887,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 888,
                          "lineChange": "none"
                        },
                        {
                          "line": "            self.on_model_change(form, model)\n",
                          "lineNumber": 889,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 890,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def after_model_change(self, form, model, is_created):\n",
                          "lineNumber": 891,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 892,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Perform some actions after a model was created or updated and\n",
                          "lineNumber": 893,
                          "lineChange": "none"
                        },
                        {
                          "line": "            committed to the database.\n",
                          "lineNumber": 894,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 895,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Called from create_model after successful database commit.\n",
                          "lineNumber": 896,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 897,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default does nothing.\n",
                          "lineNumber": 898,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 899,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 900,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form used to create/update model\n",
                          "lineNumber": 901,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 902,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model that was created/updated\n",
                          "lineNumber": 903,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param is_created:\n",
                          "lineNumber": 904,
                          "lineChange": "none"
                        },
                        {
                          "line": "                True if model was created, False if model was updated\n",
                          "lineNumber": 905,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 906,
                          "lineChange": "none"
                        },
                        {
                          "line": "        pass\n",
                          "lineNumber": 907,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 908,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def on_model_delete(self, model):\n",
                          "lineNumber": 909,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 910,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Perform some actions before a model is deleted.\n",
                          "lineNumber": 911,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 912,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Called from delete_model in the same transaction\n",
                          "lineNumber": 913,
                          "lineChange": "none"
                        },
                        {
                          "line": "            (if it has any meaning for a store backend).\n",
                          "lineNumber": 914,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 915,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default do nothing.\n",
                          "lineNumber": 916,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 917,
                          "lineChange": "none"
                        },
                        {
                          "line": "        pass\n",
                          "lineNumber": 918,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 919,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def create_model(self, form):\n",
                          "lineNumber": 920,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 921,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create model from the form.\n",
                          "lineNumber": 922,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 923,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns `True` if operation succeeded.\n",
                          "lineNumber": 924,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 925,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 926,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 927,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 928,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form instance\n",
                          "lineNumber": 929,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 930,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 931,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 932,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def update_model(self, form, model):\n",
                          "lineNumber": 933,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 934,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Update model from the form.\n",
                          "lineNumber": 935,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 936,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns `True` if operation succeeded.\n",
                          "lineNumber": 937,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 938,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 939,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 940,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param form:\n",
                          "lineNumber": 941,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Form instance\n",
                          "lineNumber": 942,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 943,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model instance\n",
                          "lineNumber": 944,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 945,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 946,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 947,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def delete_model(self, model):\n",
                          "lineNumber": 948,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 949,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Delete model.\n",
                          "lineNumber": 950,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 951,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns `True` if operation succeeded.\n",
                          "lineNumber": 952,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 953,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Must be implemented in the child class.\n",
                          "lineNumber": 954,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 955,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 956,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model instance\n",
                          "lineNumber": 957,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 958,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 959,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 960,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Various helpers\n",
                          "lineNumber": 961,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _prettify_name(self, name):\n",
                          "lineNumber": 962,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 963,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Prettify pythonic variable name.\n",
                          "lineNumber": 964,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 965,
                          "lineChange": "none"
                        },
                        {
                          "line": "            For example, 'hello_world' will be converted to 'Hello World'\n",
                          "lineNumber": 966,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 967,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 968,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Name to prettify\n",
                          "lineNumber": 969,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 970,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return prettify_name(name)\n",
                          "lineNumber": 971,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 972,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_empty_list_message(self):\n",
                          "lineNumber": 973,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return gettext('There are no items in the table.')\n",
                          "lineNumber": 974,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 975,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def unique_filter_label(self, flt):\n",
                          "lineNumber": 976,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 977,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Given a filter `flt`, return a unique name for that filter in\n",
                          "lineNumber": 978,
                          "lineChange": "none"
                        },
                        {
                          "line": "            this view.\n",
                          "lineNumber": 979,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 980,
                          "lineChange": "none"
                        },
                        {
                          "line": "            By default, returns a numeric index or a human-readable filter name\n",
                          "lineNumber": 981,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 982,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Does not include the `flt[n]_` portion of the filter name.\n",
                          "lineNumber": 983,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 984,
                          "lineChange": "none"
                        },
                        {
                          "line": "            To use custom names, override this function, eg\n",
                          "lineNumber": 985,
                          "lineChange": "none"
                        },
                        {
                          "line": "            def unique_filter_label(self, flt):\n",
                          "lineNumber": 986,
                          "lineChange": "none"
                        },
                        {
                          "line": "                return flt.name + flt.__class__.__name__\n",
                          "lineNumber": 987,
                          "lineChange": "none"
                        },
                        {
                          "line": "                \n",
                          "lineNumber": 988,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Be aware that if you override this method, the default URL format\n",
                          "lineNumber": 989,
                          "lineChange": "none"
                        },
                        {
                          "line": "            will no longer work.\n",
                          "lineNumber": 990,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 991,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.named_filter_urls:\n",
                          "lineNumber": 992,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return re.sub('\\W', '_', u'{name}_{operation}'.format(name=flt.name, operation=flt.operation())).lower()\n",
                          "lineNumber": 993,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 994,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return str(self._filters.index(flt))\n",
                          "lineNumber": 995,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 996,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_filter_args(self):\n",
                          "lineNumber": 997,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 998,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Retrieve and parse filter parameters from the request URL.\n",
                          "lineNumber": 999,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 1000,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns a list of 2-tuples in the format [(idx, value), ...],\n",
                          "lineNumber": 1001,
                          "lineChange": "none"
                        },
                        {
                          "line": "            where idx is the index into the list returned by get_filters().\n",
                          "lineNumber": 1002,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 1003,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override this method to provide your own URL filter format.\n",
                          "lineNumber": 1004,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1005,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self._filters:\n",
                          "lineNumber": 1006,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None\n",
                          "lineNumber": 1007,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1008,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filter_idx_by_label = dict((self.unique_filter_label(flt), i) for i, flt in enumerate(self._filters))\n",
                          "lineNumber": 1009,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 1010,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sfilters = []\n",
                          "lineNumber": 1011,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1012,
                          "lineChange": "none"
                        },
                        {
                          "line": "        for n in request.args:\n",
                          "lineNumber": 1013,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if not n.startswith('flt'):\n",
                          "lineNumber": 1014,
                          "lineChange": "none"
                        },
                        {
                          "line": "                continue\n",
                          "lineNumber": 1015,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if '_' not in n:\n",
                          "lineNumber": 1016,
                          "lineChange": "none"
                        },
                        {
                          "line": "                continue\n",
                          "lineNumber": 1017,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1018,
                          "lineChange": "none"
                        },
                        {
                          "line": "            pos, filter_label = n[3:].split('_', 1)\n",
                          "lineNumber": 1019,
                          "lineChange": "none"
                        },
                        {
                          "line": "            \n",
                          "lineNumber": 1020,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # If pos not specified, just add incrementally to the list.\n",
                          "lineNumber": 1021,
                          "lineChange": "none"
                        },
                        {
                          "line": "            pos = int(pos) if pos else len(sfilters)\n",
                          "lineNumber": 1022,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1023,
                          "lineChange": "none"
                        },
                        {
                          "line": "            try:\n",
                          "lineNumber": 1024,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # See if filter is numeric\n",
                          "lineNumber": 1025,
                          "lineChange": "none"
                        },
                        {
                          "line": "                idx = int(filter_label)\n",
                          "lineNumber": 1026,
                          "lineChange": "none"
                        },
                        {
                          "line": "            except ValueError:\n",
                          "lineNumber": 1027,
                          "lineChange": "none"
                        },
                        {
                          "line": "                # If non-numeric, look filter up by name\n",
                          "lineNumber": 1028,
                          "lineChange": "none"
                        },
                        {
                          "line": "                try:\n",
                          "lineNumber": 1029,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    idx = filter_idx_by_label[filter_label]\n",
                          "lineNumber": 1030,
                          "lineChange": "none"
                        },
                        {
                          "line": "                except KeyError:\n",
                          "lineNumber": 1031,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    # No matching filter name\n",
                          "lineNumber": 1032,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    continue\n",
                          "lineNumber": 1033,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1034,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if 0 <= idx < len(self._filters):\n",
                          "lineNumber": 1035,
                          "lineChange": "none"
                        },
                        {
                          "line": "                flt = self._filters[idx]\n",
                          "lineNumber": 1036,
                          "lineChange": "none"
                        },
                        {
                          "line": "                value = request.args[n]\n",
                          "lineNumber": 1037,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if flt.validate(value):\n",
                          "lineNumber": 1038,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    sfilters.append((pos, (idx, flt.clean(value))))\n",
                          "lineNumber": 1039,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1040,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return [v[1] for v in sorted(sfilters, key=lambda n: n[0])]\n",
                          "lineNumber": 1041,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1042,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_listing_args(self):\n",
                          "lineNumber": 1043,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1044,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Return generic list view arguments from query string.\n",
                          "lineNumber": 1045,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1046,
                          "lineChange": "none"
                        },
                        {
                          "line": "        page = request.args.get('page', 0, type=int)\n",
                          "lineNumber": 1047,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sort = request.args.get('sort', None, type=int)\n",
                          "lineNumber": 1048,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sort_desc = request.args.get('desc', None, type=int)\n",
                          "lineNumber": 1049,
                          "lineChange": "none"
                        },
                        {
                          "line": "        search = request.args.get('search', None)\n",
                          "lineNumber": 1050,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return page, sort, sort_desc, search\n",
                          "lineNumber": 1051,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1052,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_url(self, view=None, page=None, sort=None, sort_desc=None,\n",
                          "lineNumber": 1053,
                          "lineChange": "none"
                        },
                        {
                          "line": "                 search=None, filters=None):\n",
                          "lineNumber": 1054,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1055,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Generate page URL with current page, sort column and\n",
                          "lineNumber": 1056,
                          "lineChange": "none"
                        },
                        {
                          "line": "            other parameters.\n",
                          "lineNumber": 1057,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1058,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param view:\n",
                          "lineNumber": 1059,
                          "lineChange": "none"
                        },
                        {
                          "line": "                View name\n",
                          "lineNumber": 1060,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param page:\n",
                          "lineNumber": 1061,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Page number\n",
                          "lineNumber": 1062,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort:\n",
                          "lineNumber": 1063,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Sort column index\n",
                          "lineNumber": 1064,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param sort_desc:\n",
                          "lineNumber": 1065,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Use descending sorting order\n",
                          "lineNumber": 1066,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param search:\n",
                          "lineNumber": 1067,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Search query\n",
                          "lineNumber": 1068,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param filters:\n",
                          "lineNumber": 1069,
                          "lineChange": "none"
                        },
                        {
                          "line": "                List of active filters\n",
                          "lineNumber": 1070,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1071,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not search:\n",
                          "lineNumber": 1072,
                          "lineChange": "none"
                        },
                        {
                          "line": "            search = None\n",
                          "lineNumber": 1073,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1074,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not page:\n",
                          "lineNumber": 1075,
                          "lineChange": "none"
                        },
                        {
                          "line": "            page = None\n",
                          "lineNumber": 1076,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1077,
                          "lineChange": "none"
                        },
                        {
                          "line": "        kwargs = dict(page=page, sort=sort, desc=sort_desc, search=search)\n",
                          "lineNumber": 1078,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1079,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if filters:\n",
                          "lineNumber": 1080,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for flt in filters:\n",
                          "lineNumber": 1081,
                          "lineChange": "none"
                        },
                        {
                          "line": "                key = 'flt_%s' % self.unique_filter_label(self._filters[flt[0]])\n",
                          "lineNumber": 1082,
                          "lineChange": "none"
                        },
                        {
                          "line": "                kwargs[key] = flt[1]\n",
                          "lineNumber": 1083,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1084,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return url_for(view, **kwargs)\n",
                          "lineNumber": 1085,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \n",
                          "lineNumber": 1086,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def is_action_allowed(self, name):\n",
                          "lineNumber": 1087,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1088,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Override this method to allow or disallow actions based\n",
                          "lineNumber": 1089,
                          "lineChange": "none"
                        },
                        {
                          "line": "            on some condition.\n",
                          "lineNumber": 1090,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1091,
                          "lineChange": "none"
                        },
                        {
                          "line": "            The default implementation only checks if the particular action\n",
                          "lineNumber": 1092,
                          "lineChange": "none"
                        },
                        {
                          "line": "            is not in `action_disallowed_list`.\n",
                          "lineNumber": 1093,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1094,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return name not in self.action_disallowed_list\n",
                          "lineNumber": 1095,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1096,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _get_field_value(self, model, name):\n",
                          "lineNumber": 1097,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1098,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Get unformatted field value from the model\n",
                          "lineNumber": 1099,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1100,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return rec_getattr(model, name)\n",
                          "lineNumber": 1101,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1102,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def filters_by_label(self):\n",
                          "lineNumber": 1103,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1104,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Flattened dict of all filters, indexed by their label.\n",
                          "lineNumber": 1105,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1106,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return dict((self.unique_filter_label(flt), flt) for flt in self._filters)\n",
                          "lineNumber": 1107,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1108,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @contextfunction\n",
                          "lineNumber": 1109,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def get_list_value(self, context, model, name):\n",
                          "lineNumber": 1110,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1111,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Returns the value to be displayed in the list view\n",
                          "lineNumber": 1112,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1113,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param context:\n",
                          "lineNumber": 1114,
                          "lineChange": "none"
                        },
                        {
                          "line": "                :py:class:`jinja2.runtime.Context`\n",
                          "lineNumber": 1115,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param model:\n",
                          "lineNumber": 1116,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Model instance\n",
                          "lineNumber": 1117,
                          "lineChange": "none"
                        },
                        {
                          "line": "            :param name:\n",
                          "lineNumber": 1118,
                          "lineChange": "none"
                        },
                        {
                          "line": "                Field name\n",
                          "lineNumber": 1119,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1120,
                          "lineChange": "none"
                        },
                        {
                          "line": "        column_fmt = self.column_formatters.get(name)\n",
                          "lineNumber": 1121,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if column_fmt is not None:\n",
                          "lineNumber": 1122,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return column_fmt(self, context, model, name)\n",
                          "lineNumber": 1123,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1124,
                          "lineChange": "none"
                        },
                        {
                          "line": "            value = self._get_field_value(model, name)\n",
                          "lineNumber": 1125,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1126,
                          "lineChange": "none"
                        },
                        {
                          "line": "        choices_map = self._column_choices_map.get(name, {})\n",
                          "lineNumber": 1127,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if choices_map:\n",
                          "lineNumber": 1128,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return choices_map.get(value) or value\n",
                          "lineNumber": 1129,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1130,
                          "lineChange": "none"
                        },
                        {
                          "line": "        type_fmt = self.column_type_formatters.get(type(value))\n",
                          "lineNumber": 1131,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if type_fmt is not None:\n",
                          "lineNumber": 1132,
                          "lineChange": "none"
                        },
                        {
                          "line": "            value = type_fmt(self, value)\n",
                          "lineNumber": 1133,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1134,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return value\n",
                          "lineNumber": 1135,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1136,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # AJAX references\n",
                          "lineNumber": 1137,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _process_ajax_references(self):\n",
                          "lineNumber": 1138,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1139,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Process `form_ajax_refs` and generate model loaders that\n",
                          "lineNumber": 1140,
                          "lineChange": "none"
                        },
                        {
                          "line": "            will be used by the `ajax_lookup` view.\n",
                          "lineNumber": 1141,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1142,
                          "lineChange": "none"
                        },
                        {
                          "line": "        result = {}\n",
                          "lineNumber": 1143,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1144,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if self.form_ajax_refs:\n",
                          "lineNumber": 1145,
                          "lineChange": "none"
                        },
                        {
                          "line": "            for name, options in iteritems(self.form_ajax_refs):\n",
                          "lineNumber": 1146,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if isinstance(options, dict):\n",
                          "lineNumber": 1147,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[name] = self._create_ajax_loader(name, options)\n",
                          "lineNumber": 1148,
                          "lineChange": "none"
                        },
                        {
                          "line": "                elif isinstance(options, AjaxModelLoader):\n",
                          "lineNumber": 1149,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    result[name] = options\n",
                          "lineNumber": 1150,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 1151,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    raise ValueError('%s.form_ajax_refs can not handle %s types' % (self, type(options)))\n",
                          "lineNumber": 1152,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1153,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return result\n",
                          "lineNumber": 1154,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1155,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def _create_ajax_loader(self, name, options):\n",
                          "lineNumber": 1156,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1157,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Model backend will override this to implement AJAX model loading.\n",
                          "lineNumber": 1158,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1159,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise NotImplemented()\n",
                          "lineNumber": 1160,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1161,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # Views\n",
                          "lineNumber": 1162,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/')\n",
                          "lineNumber": 1163,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def index_view(self):\n",
                          "lineNumber": 1164,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1165,
                          "lineChange": "none"
                        },
                        {
                          "line": "            List view\n",
                          "lineNumber": 1166,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1167,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Grab parameters from URL\n",
                          "lineNumber": 1168,
                          "lineChange": "none"
                        },
                        {
                          "line": "        page, sort_idx, sort_desc, search = self._get_listing_args()\n",
                          "lineNumber": 1169,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filters = self.get_filter_args()\n",
                          "lineNumber": 1170,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1171,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Map column index to column name\n",
                          "lineNumber": 1172,
                          "lineChange": "none"
                        },
                        {
                          "line": "        sort_column = self._get_column_by_idx(sort_idx)\n",
                          "lineNumber": 1173,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if sort_column is not None:\n",
                          "lineNumber": 1174,
                          "lineChange": "none"
                        },
                        {
                          "line": "            sort_column = sort_column[0]\n",
                          "lineNumber": 1175,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1176,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Get count and data\n",
                          "lineNumber": 1177,
                          "lineChange": "none"
                        },
                        {
                          "line": "        count, data = self.get_list(page, sort_column, sort_desc,\n",
                          "lineNumber": 1178,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                    search, filters)\n",
                          "lineNumber": 1179,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1180,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Calculate number of pages\n",
                          "lineNumber": 1181,
                          "lineChange": "none"
                        },
                        {
                          "line": "        num_pages = count // self.page_size\n",
                          "lineNumber": 1182,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if count % self.page_size != 0:\n",
                          "lineNumber": 1183,
                          "lineChange": "none"
                        },
                        {
                          "line": "            num_pages += 1\n",
                          "lineNumber": 1184,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1185,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Various URL generation helpers\n",
                          "lineNumber": 1186,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def pager_url(p):\n",
                          "lineNumber": 1187,
                          "lineChange": "none"
                        },
                        {
                          "line": "            # Do not add page number if it is first page\n",
                          "lineNumber": 1188,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if p == 0:\n",
                          "lineNumber": 1189,
                          "lineChange": "none"
                        },
                        {
                          "line": "                p = None\n",
                          "lineNumber": 1190,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1191,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self._get_url('.index_view', p, sort_idx, sort_desc,\n",
                          "lineNumber": 1192,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 search, filters)\n",
                          "lineNumber": 1193,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1194,
                          "lineChange": "none"
                        },
                        {
                          "line": "        def sort_url(column, invert=False):\n",
                          "lineNumber": 1195,
                          "lineChange": "none"
                        },
                        {
                          "line": "            desc = None\n",
                          "lineNumber": 1196,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1197,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if invert and not sort_desc:\n",
                          "lineNumber": 1198,
                          "lineChange": "none"
                        },
                        {
                          "line": "                desc = 1\n",
                          "lineNumber": 1199,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1200,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return self._get_url('.index_view', page, column, desc,\n",
                          "lineNumber": 1201,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 search, filters)\n",
                          "lineNumber": 1202,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1203,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # Actions\n",
                          "lineNumber": 1204,
                          "lineChange": "none"
                        },
                        {
                          "line": "        actions, actions_confirmation = self.get_actions_list()\n",
                          "lineNumber": 1205,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1206,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.render(self.list_template,\n",
                          "lineNumber": 1207,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               data=data,\n",
                          "lineNumber": 1208,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # List\n",
                          "lineNumber": 1209,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               list_columns=self._list_columns,\n",
                          "lineNumber": 1210,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sortable_columns=self._sortable_columns,\n",
                          "lineNumber": 1211,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Stuff\n",
                          "lineNumber": 1212,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               enumerate=enumerate,\n",
                          "lineNumber": 1213,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               get_pk_value=self.get_pk_value,\n",
                          "lineNumber": 1214,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               get_value=self.get_list_value,\n",
                          "lineNumber": 1215,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               return_url=self._get_url('.index_view',\n",
                          "lineNumber": 1216,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        page,\n",
                          "lineNumber": 1217,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        sort_idx,\n",
                          "lineNumber": 1218,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        sort_desc,\n",
                          "lineNumber": 1219,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        search,\n",
                          "lineNumber": 1220,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                        filters),\n",
                          "lineNumber": 1221,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Pagination\n",
                          "lineNumber": 1222,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               count=count,\n",
                          "lineNumber": 1223,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               pager_url=pager_url,\n",
                          "lineNumber": 1224,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               num_pages=num_pages,\n",
                          "lineNumber": 1225,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               page=page,\n",
                          "lineNumber": 1226,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Sorting\n",
                          "lineNumber": 1227,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sort_column=sort_idx,\n",
                          "lineNumber": 1228,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sort_desc=sort_desc,\n",
                          "lineNumber": 1229,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               sort_url=sort_url,\n",
                          "lineNumber": 1230,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Search\n",
                          "lineNumber": 1231,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               search_supported=self._search_supported,\n",
                          "lineNumber": 1232,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               clear_search_url=self._get_url('.index_view',\n",
                          "lineNumber": 1233,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                              None,\n",
                          "lineNumber": 1234,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                              sort_idx,\n",
                          "lineNumber": 1235,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                                              sort_desc),\n",
                          "lineNumber": 1236,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               search=search,\n",
                          "lineNumber": 1237,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Filters\n",
                          "lineNumber": 1238,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               filters=self._filters,\n",
                          "lineNumber": 1239,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               filter_groups=self._flattened_filters_by_group,\n",
                          "lineNumber": 1240,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               active_filters=filters,\n",
                          "lineNumber": 1241,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1242,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               # Actions\n",
                          "lineNumber": 1243,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               actions=actions,\n",
                          "lineNumber": 1244,
                          "lineChange": "none"
                        },
                        {
                          "line": "                               actions_confirmation=actions_confirmation)\n",
                          "lineNumber": 1245,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1246,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/new/', methods=('GET', 'POST'))\n",
                          "lineNumber": 1247,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def create_view(self):\n",
                          "lineNumber": 1248,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1249,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Create model view\n",
                          "lineNumber": 1250,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1251,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                          "lineNumber": 1252,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1253,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self.can_create:\n",
                          "lineNumber": 1254,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1255,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1256,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form = self.create_form()\n",
                          "lineNumber": 1257,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1258,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if validate_form_on_submit(form):\n",
                          "lineNumber": 1259,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if self.create_model(form):\n",
                          "lineNumber": 1260,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if '_add_another' in request.form:\n",
                          "lineNumber": 1261,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    flash(gettext('Model was successfully created.'))\n",
                          "lineNumber": 1262,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(url_for('.create_view', url=return_url))\n",
                          "lineNumber": 1263,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 1264,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(return_url)\n",
                          "lineNumber": 1265,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1266,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                          "lineNumber": 1267,
                          "lineChange": "none"
                        },
                        {
                          "line": "                             form_rules=self._form_create_rules)\n",
                          "lineNumber": 1268,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1269,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.render(self.create_template,\n",
                          "lineNumber": 1270,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form=form,\n",
                          "lineNumber": 1271,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form_opts=form_opts,\n",
                          "lineNumber": 1272,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           return_url=return_url)\n",
                          "lineNumber": 1273,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1274,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/edit/', methods=('GET', 'POST'))\n",
                          "lineNumber": 1275,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def edit_view(self):\n",
                          "lineNumber": 1276,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1277,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Edit model view\n",
                          "lineNumber": 1278,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1279,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                          "lineNumber": 1280,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1281,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self.can_edit:\n",
                          "lineNumber": 1282,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1283,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1284,
                          "lineChange": "none"
                        },
                        {
                          "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                          "lineNumber": 1285,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if id is None:\n",
                          "lineNumber": 1286,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1287,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1288,
                          "lineChange": "none"
                        },
                        {
                          "line": "        model = self.get_one(id)\n",
                          "lineNumber": 1289,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1290,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if model is None:\n",
                          "lineNumber": 1291,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1292,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1293,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form = self.edit_form(obj=model)\n",
                          "lineNumber": 1294,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1295,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if validate_form_on_submit(form):\n",
                          "lineNumber": 1296,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if self.update_model(form, model):\n",
                          "lineNumber": 1297,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if '_continue_editing' in request.form:\n",
                          "lineNumber": 1298,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    flash(gettext('Model was successfully saved.'))\n",
                          "lineNumber": 1299,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(request.url)\n",
                          "lineNumber": 1300,
                          "lineChange": "none"
                        },
                        {
                          "line": "                else:\n",
                          "lineNumber": 1301,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    return redirect(return_url)\n",
                          "lineNumber": 1302,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1303,
                          "lineChange": "none"
                        },
                        {
                          "line": "        form_opts = FormOpts(widget_args=self.form_widget_args,\n",
                          "lineNumber": 1304,
                          "lineChange": "none"
                        },
                        {
                          "line": "                             form_rules=self._form_create_rules)\n",
                          "lineNumber": 1305,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1306,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return self.render(self.edit_template,\n",
                          "lineNumber": 1307,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           model=model,\n",
                          "lineNumber": 1308,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form=form,\n",
                          "lineNumber": 1309,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           form_opts=form_opts,\n",
                          "lineNumber": 1310,
                          "lineChange": "none"
                        },
                        {
                          "line": "                           return_url=return_url)\n",
                          "lineNumber": 1311,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1312,
                          "lineChange": "none"
                        },
                        {
                          "line": "    @expose('/delete/', methods=('POST',))\n",
                          "lineNumber": 1313,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def delete_view(self):\n",
                          "lineNumber": 1314,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1315,
                          "lineChange": "none"
                        },
                        {
                          "line": "            Delete model view. Only POST method is allowed.\n",
                          "lineNumber": 1316,
                          "lineChange": "none"
                        },
                        {
                          "line": "        \"\"\"\n",
                          "lineNumber": 1317,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return_url = request.args.get('url') or url_for('.index_view')\n",
                          "lineNumber": 1318,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        return_url = get_redirect_target() or url_for('.index_view')\n",
                          "lineNumber": 1318,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1319,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # TODO: Use post\n",
                          "lineNumber": 1320,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not self.can_delete:\n",
                          "lineNumber": 1321,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1322,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1323,
                          "lineChange": "none"
                        },
                        {
                          "line": "        id = get_mdict_item_or_list(request.args, 'id')\n",
                          "lineNumber": 1324,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if id is None:\n",
                          "lineNumber": 1325,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return redirect(return_url)\n",
                          "lineNumber": 1326,
                          "lineChange": "none"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 13,
                  "cwe": [
                    "CWE-601"
                  ]
                }
              },
              {
                "id": "python/PT",
                "name": "PT",
                "shortDescription": {
                  "text": "Path Traversal"
                },
                "defaultConfiguration": {
                  "level": "warning"
                },
                "help": {
                  "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "PT",
                    "Security",
                    "SourceLocalEnv",
                    "SourceCLI",
                    "Taint"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                      "lines": [
                        {
                          "line": "from flask import abort, request, Response, send_file, url_for\n",
                          "lineNumber": 18,
                          "lineChange": "removed"
                        },
                        {
                          "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                          "lineNumber": 18,
                          "lineChange": "added"
                        },
                        {
                          "line": "from flask.json import jsonify\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "import os\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "import requests\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from shutil import copyfileobj\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "from tempfile import NamedTemporaryFile\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "from xspf import Xspf\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "from ..app import app, music\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "from ..id3 import MP3\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "JSON_TYPE = 'application/json'\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Mapping: Google : Mutagen EasyID3\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "METADATA_FIELDS = {\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'artist': 'artist',\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'title': 'title',\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'album': 'album',\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'albumArtist': 'albumartistsort',\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'composer': 'composer',\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'trackNumber': 'tracknumber',\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'discNumber': 'discnumber',\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'genre': 'genre',\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'year': 'date',\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'durationMillis': 'length',\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "}\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "def mp3ify(resp):\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "    resp.mimetype = 'audio/mpeg'\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return resp\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "def send_song(filename):\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return mp3ify(send_file(filename))\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :type playlist: dict\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :rtype: str\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "                date=create_iso, location=p_url)\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "    for track in playlist['tracks']:\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if 'track' not in track:\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "            continue\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        tmd = track['track']\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "        metadata = {\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'location': url,\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'title': tmd['title'],\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'creator': tmd['artist'],\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'album': tmd['album'],\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'trackNum': str(tmd['trackNumber']),\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'duration': tmd['durationMillis'],\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        }\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        album_art = tmd.get('albumArtRef', [])\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if album_art:\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "            metadata['image'] = album_art[0]['url']\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "        xspf.add_track(metadata)\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return xspf.toXml()\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "@app.route('/songs/<song_id>')\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "def get_song(song_id):\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                          "lineNumber": 98,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                          "lineNumber": 98,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                      "lines": [
                        {
                          "line": "from werkzeug import secure_filename\n",
                          "lineNumber": 20,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from app import web, CobraTaskInfo, db\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/', methods=['GET'])\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/index', methods=['GET'])\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "def homepage():\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In homepage Route')\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('index.html')\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/blank')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "def blank():\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In blank Route')\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('blank.html')\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/add', methods=['POST'])\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "def add():\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In add Route')\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if user upload a file, so we set the scan type to file scan\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan type and level\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_type = request.form['scan_type']\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    level = request.form['level']\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan way and version\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_way = request.form['scan_way']\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    old_version = request.form['old_version']\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    new_version = request.form['new_version']\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_way or not scan_way.isdigit():\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_way == '2':\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not old_version or not new_version:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    elif scan_way == '1':\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "        old_version = None\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_version = None\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    task_type = 1\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check if there is a file or gitlab url\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if len(request.files) == 0:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # no files, should check username and password\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = request.form['url']\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        username = request.form['username']\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        password = request.form['password']\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not url or not username or not password:\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # insert into db\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 scan_way, old_version, new_version)\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.add(new_task)\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.commit()\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # there is a file, check file format and uncompress it.\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 2\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src = request.files['file']\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                          "lineNumber": 89,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                          "lineNumber": 90,
                          "lineChange": "added"
                        },
                        {
                          "line": "        filepath = 'uploads/' + filename\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src.save(filepath)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                      "lines": [
                        {
                          "line": "from werkzeug import secure_filename\n",
                          "lineNumber": 20,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from app import web, CobraTaskInfo, db\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/', methods=['GET'])\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/index', methods=['GET'])\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "def homepage():\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In homepage Route')\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('index.html')\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/blank')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "def blank():\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In blank Route')\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('blank.html')\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/add', methods=['POST'])\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "def add():\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In add Route')\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if user upload a file, so we set the scan type to file scan\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan type and level\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_type = request.form['scan_type']\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    level = request.form['level']\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan way and version\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_way = request.form['scan_way']\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    old_version = request.form['old_version']\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    new_version = request.form['new_version']\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_way or not scan_way.isdigit():\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_way == '2':\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not old_version or not new_version:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    elif scan_way == '1':\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "        old_version = None\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_version = None\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    task_type = 1\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check if there is a file or gitlab url\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if len(request.files) == 0:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # no files, should check username and password\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = request.form['url']\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        username = request.form['username']\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        password = request.form['password']\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not url or not username or not password:\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # insert into db\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 scan_way, old_version, new_version)\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.add(new_task)\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.commit()\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # there is a file, check file format and uncompress it.\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 2\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src = request.files['file']\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                          "lineNumber": 89,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                          "lineNumber": 90,
                          "lineChange": "added"
                        },
                        {
                          "line": "        filepath = 'uploads/' + filename\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src.save(filepath)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # rather than \"application/x-rar\"\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # check file type via mime type\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "            os.remove(filepath)\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 7,
                  "cwe": [
                    "CWE-23"
                  ]
                }
              },
              {
                "id": "python/PT/test",
                "name": "PT/test",
                "shortDescription": {
                  "text": "Path Traversal"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "PT",
                    "Security",
                    "InTest",
                    "SourceLocalEnv",
                    "SourceCLI",
                    "Taint"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                      "lines": [
                        {
                          "line": "from flask import abort, request, Response, send_file, url_for\n",
                          "lineNumber": 18,
                          "lineChange": "removed"
                        },
                        {
                          "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                          "lineNumber": 18,
                          "lineChange": "added"
                        },
                        {
                          "line": "from flask.json import jsonify\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "import os\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "import requests\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from shutil import copyfileobj\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "from tempfile import NamedTemporaryFile\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "from xspf import Xspf\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "from ..app import app, music\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "from ..id3 import MP3\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "JSON_TYPE = 'application/json'\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Mapping: Google : Mutagen EasyID3\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "METADATA_FIELDS = {\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'artist': 'artist',\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'title': 'title',\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'album': 'album',\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'albumArtist': 'albumartistsort',\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'composer': 'composer',\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'trackNumber': 'tracknumber',\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'discNumber': 'discnumber',\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'genre': 'genre',\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'year': 'date',\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'durationMillis': 'length',\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "}\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "def mp3ify(resp):\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "    resp.mimetype = 'audio/mpeg'\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return resp\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "def send_song(filename):\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return mp3ify(send_file(filename))\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :type playlist: dict\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :rtype: str\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "                date=create_iso, location=p_url)\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "    for track in playlist['tracks']:\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if 'track' not in track:\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "            continue\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        tmd = track['track']\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "        metadata = {\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'location': url,\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'title': tmd['title'],\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'creator': tmd['artist'],\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'album': tmd['album'],\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'trackNum': str(tmd['trackNumber']),\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'duration': tmd['durationMillis'],\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        }\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        album_art = tmd.get('albumArtRef', [])\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if album_art:\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "            metadata['image'] = album_art[0]['url']\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "        xspf.add_track(metadata)\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return xspf.toXml()\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "@app.route('/songs/<song_id>')\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "def get_song(song_id):\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                          "lineNumber": 98,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                          "lineNumber": 98,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                      "lines": [
                        {
                          "line": "from werkzeug import secure_filename\n",
                          "lineNumber": 20,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from app import web, CobraTaskInfo, db\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/', methods=['GET'])\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/index', methods=['GET'])\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "def homepage():\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In homepage Route')\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('index.html')\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/blank')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "def blank():\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In blank Route')\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('blank.html')\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/add', methods=['POST'])\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "def add():\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In add Route')\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if user upload a file, so we set the scan type to file scan\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan type and level\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_type = request.form['scan_type']\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    level = request.form['level']\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan way and version\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_way = request.form['scan_way']\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    old_version = request.form['old_version']\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    new_version = request.form['new_version']\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_way or not scan_way.isdigit():\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_way == '2':\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not old_version or not new_version:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    elif scan_way == '1':\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "        old_version = None\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_version = None\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    task_type = 1\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check if there is a file or gitlab url\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if len(request.files) == 0:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # no files, should check username and password\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = request.form['url']\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        username = request.form['username']\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        password = request.form['password']\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not url or not username or not password:\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # insert into db\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 scan_way, old_version, new_version)\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.add(new_task)\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.commit()\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # there is a file, check file format and uncompress it.\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 2\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src = request.files['file']\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                          "lineNumber": 89,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                          "lineNumber": 90,
                          "lineChange": "added"
                        },
                        {
                          "line": "        filepath = 'uploads/' + filename\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src.save(filepath)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                      "lines": [
                        {
                          "line": "from werkzeug import secure_filename\n",
                          "lineNumber": 20,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from app import web, CobraTaskInfo, db\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/', methods=['GET'])\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/index', methods=['GET'])\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "def homepage():\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In homepage Route')\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('index.html')\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/blank')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "def blank():\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In blank Route')\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('blank.html')\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/add', methods=['POST'])\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "def add():\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In add Route')\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if user upload a file, so we set the scan type to file scan\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan type and level\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_type = request.form['scan_type']\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    level = request.form['level']\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan way and version\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_way = request.form['scan_way']\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    old_version = request.form['old_version']\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    new_version = request.form['new_version']\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_way or not scan_way.isdigit():\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_way == '2':\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not old_version or not new_version:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    elif scan_way == '1':\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "        old_version = None\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_version = None\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    task_type = 1\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check if there is a file or gitlab url\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if len(request.files) == 0:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # no files, should check username and password\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = request.form['url']\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        username = request.form['username']\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        password = request.form['password']\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not url or not username or not password:\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # insert into db\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 scan_way, old_version, new_version)\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.add(new_task)\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.commit()\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # there is a file, check file format and uncompress it.\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 2\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src = request.files['file']\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                          "lineNumber": 89,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                          "lineNumber": 90,
                          "lineChange": "added"
                        },
                        {
                          "line": "        filepath = 'uploads/' + filename\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src.save(filepath)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # rather than \"application/x-rar\"\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # check file type via mime type\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "            os.remove(filepath)\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 7,
                  "cwe": [
                    "CWE-23"
                  ]
                }
              },
              {
                "id": "python/HardcodedNonCryptoSecret/test",
                "name": "HardcodedNonCryptoSecret/test",
                "shortDescription": {
                  "text": "Hardcoded Secret"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "HardcodedNonCryptoSecret",
                    "Security",
                    "InTest"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/ortoloco/ortoloco/commit/2bdc2a18ae07478b6b2ad481e6ad8ee43d99dd11?diff=split#diff-2c4d0fc3f973ca45b5be1e050f542f3fdf9f879073895c1ff6c8a127f9311b67L-1",
                      "lines": [
                        {
                          "line": "import os\n",
                          "lineNumber": 1,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 2,
                          "lineChange": "none"
                        },
                        {
                          "line": "\"\"\"\n",
                          "lineNumber": 3,
                          "lineChange": "none"
                        },
                        {
                          "line": "    General Settings\n",
                          "lineNumber": 4,
                          "lineChange": "none"
                        },
                        {
                          "line": "\"\"\"\n",
                          "lineNumber": 5,
                          "lineChange": "none"
                        },
                        {
                          "line": "DEBUG = os.environ.get(\"JUNTAGRICO_DEBUG\", \"True\") == \"True\"\n",
                          "lineNumber": 6,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 7,
                          "lineChange": "none"
                        },
                        {
                          "line": "ALLOWED_HOSTS = ['my.ortoloco.ch']\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 9,
                          "lineChange": "none"
                        },
                        {
                          "line": "DATA_UPLOAD_MAX_NUMBER_FIELDS = None\n",
                          "lineNumber": 10,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 11,
                          "lineChange": "none"
                        },
                        {
                          "line": "FILE_UPLOAD_PERMISSIONS = 0o444\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "ROOT_URLCONF = 'ortoloco.urls'\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "SITE_ID = 1\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "LOGIN_REDIRECT_URL = \"/my/home\"\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Python dotted path to the WSGI application used by Django's runserver.\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "WSGI_APPLICATION = 'ortoloco.wsgi.application'\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Make this unique, and don't share it with anybody.\n",
                          "lineNumber": 25,
                          "lineChange": "removed"
                        },
                        {
                          "line": "SECRET_KEY = 'd3w=vyfqpqmcj#&ge1d0$ch#ff7$qt#6z)lzqt=9pg8wg%d^%s'\n",
                          "lineNumber": 26,
                          "lineChange": "removed"
                        },
                        {
                          "line": "SECRET_KEY = os.environ.get('JUNTAGRICO_SECRET_KEY')\n",
                          "lineNumber": 25,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/kirstykitto/CLAtoolkit/commit/57b0252012fd2bee6671734f8a598c47106dcb3c?diff=split#diff-fb10e8b863c0b9b7a10271f5cda36dbf1e7e3fe75586870b7547050c7e2e77fdL-1",
                      "lines": [
                        {
                          "line": "import os\n",
                          "lineNumber": 6,
                          "lineChange": "added"
                        },
                        {
                          "line": "from apiclient.discovery import build\n",
                          "lineNumber": 7,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "CLIENT_ID = '775313004373-6nt8n91ih4g5qku95us9ceskbdlb6ure.apps.googleusercontent.com'\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "CLIENT_SECRET = 'MJHbk5HdDWmqyptU_ZZtBQNP'\n",
                          "lineNumber": 9,
                          "lineChange": "none"
                        },
                        {
                          "line": "SCOPE_YOUTUBE = 'https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner'\n",
                          "lineNumber": 10,
                          "lineChange": "none"
                        },
                        {
                          "line": "REDIRECT_URI = 'http://127.0.0.1:8000/dataintegration/ytAuthCallback'\n",
                          "lineNumber": 11,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "STR_YT_VIDEO_BASE_URL = \"https://www.youtube.com/watch?v=\"\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "STR_YT_CHANNEL_BASE_URL = \"https://www.youtube.com/channel/\"\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "STR_PLATFORM_NAME_YOUTUBE = \"YouTube\"\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "STR_PLATFORM_URL_YOUTUBE = \"https://www.youtube.com\"\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "STR_OBJ_TYPE_VIDEO = 'Video'\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "# For YouTube OAuth authentication\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "FLOW_YOUTUBE = OAuth2WebServerFlow(\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "    client_id=CLIENT_ID,\n",
                          "lineNumber": 22,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    client_secret=CLIENT_SECRET,\n",
                          "lineNumber": 23,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    client_id=os.environ.get(\"YOUTUBE_CLIENT_ID\"),\n",
                          "lineNumber": 21,
                          "lineChange": "added"
                        },
                        {
                          "line": "    client_secret=os.environ.get(\"YOUTUBE_CLIENT_SECRET\"),\n",
                          "lineNumber": 22,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/hartwork/jawanndenn/commit/18eebc346ded81b839b1b2d38caf19927255afca?diff=split#diff-dd637aba286a0661c1b974283e708ce762bb3d24a707054e5b81495c1b7ab2b6L-1",
                      "lines": [
                        {
                          "line": "import os\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "from jawanndenn import DEFAULT_MAX_POLLS, DEFAULT_MAX_VOTES_PER_POLL\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Quick-start development settings - unsuitable for production\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "# SECURITY WARNING: keep the secret key used in production secret!\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "SECRET_KEY = 'ou@c@e2(9oh4*z9+tu0!)zf)j=_($#vmu36iflgy@g19+bkp-m'\n",
                          "lineNumber": 24,
                          "lineChange": "removed"
                        },
                        {
                          "line": "SECRET_KEY = os.environ['JAWANNDENN_SECRET_KEY']\n",
                          "lineNumber": 24,
                          "lineChange": "added"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 109,
                  "cwe": [
                    "CWE-547"
                  ]
                }
              },
              {
                "id": "python/DisablesCSRFProtection",
                "name": "DisablesCSRFProtection",
                "shortDescription": {
                  "text": "Cross-Site Request Forgery (CSRF)"
                },
                "defaultConfiguration": {
                  "level": "warning"
                },
                "help": {
                  "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n## Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "DisablesCSRFProtection",
                    "Security"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/Ryuchen/Bistu/commit/e9658737a08c2db6fd2f988f8a2e5d45225cce53?diff=split#diff-c63e4109a52757d080e6ccd45c49783c0f249203cc93fff1813340a1dc6e90ecL-1",
                      "lines": [
                        {
                          "line": "\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "@csrf_exempt\n",
                          "lineNumber": 67,
                          "lineChange": "removed"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 3,
                  "cwe": [
                    "CWE-352"
                  ]
                }
              },
              {
                "id": "python/Ssrf",
                "name": "Ssrf",
                "shortDescription": {
                  "text": "Server-Side Request Forgery (SSRF)"
                },
                "defaultConfiguration": {
                  "level": "warning"
                },
                "help": {
                  "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n## Best practices for prevention\n* Blacklists are problematic and attackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "Ssrf",
                    "Security",
                    "SourceNonServer",
                    "SourceLocalEnv",
                    "SourceCLI",
                    "Taint"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/commit/23ad832af741f0354949a72e6c6f799eb9d2bace?diff=split#diff-7efee2ee97af01f846ed5818e84c955c51bd8efe06588e0dfa341c68966d945fL-1",
                      "lines": [
                        {
                          "line": "    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description=\"Downloads and unpacks assets\")\n",
                          "lineNumber": 31,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    parser.add_argument(\"zip_url\", action=\"store\", type=str, help=\"URL of the assets package\")\n",
                          "lineNumber": 32,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    args = parser.parse_args()\n",
                          "lineNumber": 33,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    url = \"https://github.com/ARM-software/vulkan_best_practice_for_mobile_developers/releases/download/v1.1.2/scenes.zip\"\n",
                          "lineNumber": 31,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    try:\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "        request = requests.get(args.zip_url, stream=True)\n",
                          "lineNumber": 36,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        request = requests.get(url, stream=True)\n",
                          "lineNumber": 34,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/yask123/Instant-Movie-Streamer/commit/0b66df24286da3df144b8874cb40db4c6ddf5c6c?diff=split#diff-92c6c2b7103c0f894cf5a1c09b289b8251c1c260eb20cb9027189a2a0eee5d99L-1",
                      "lines": [
                        {
                          "line": "def get_magnet_link(movie_name = 'harry potter'):\n",
                          "lineNumber": 32,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 33,
                          "lineChange": "added"
                        },
                        {
                          "line": "    URL = 'https://www.skytorrents.in/search/all/ed/1/?q='+movie_name.replace(' ', '+')\n",
                          "lineNumber": 34,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "def get_torrent_url(search_url):\n",
                          "lineNumber": 40,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    \"\"\"Grabs the best matched torrent URL from the search results.\"\"\"\n",
                          "lineNumber": 41,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    search_request_response = requests.get(search_url, verify=False)\n",
                          "lineNumber": 42,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    soup = BeautifulSoup(search_request_response.text, 'html.parser')\n",
                          "lineNumber": 43,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    movie_page = 'https://kat.cr' + (soup.find_all(\"a\", class_=\"cellMainLink\")[0].get('href'))\n",
                          "lineNumber": 44,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    resp = requests.get(URL)\n",
                          "lineNumber": 36,
                          "lineChange": "added"
                        },
                        {
                          "line": "    soup = BeautifulSoup(resp.text, 'html.parser')\n",
                          "lineNumber": 37,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/hacktoolkit/django-htk/commit/01df728743a36721d7659247a3e3b9907133ffee?diff=split#diff-eec36e337287f60f4a26ec5ed80b77d0234217d0de7dab8846fe3a39048cef9fL-1",
                      "lines": [
                        {
                          "line": "GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                          "lineNumber": 23,
                          "lineChange": "removed"
                        },
                        {
                          "line": "GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                          "lineNumber": 24,
                          "lineChange": "removed"
                        },
                        {
                          "line": "GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                          "lineNumber": 25,
                          "lineChange": "removed"
                        },
                        {
                          "line": "from htk.utils import htk_setting\n",
                          "lineNumber": 23,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "added"
                        },
                        {
                          "line": "GOOGLE_GEOCODING_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json'\n",
                          "lineNumber": 25,
                          "lineChange": "added"
                        },
                        {
                          "line": "#GOOGLE_GEOCODING_API_BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/%(format)s?sensor=%(sensor)s&'\n",
                          "lineNumber": 26,
                          "lineChange": "added"
                        },
                        {
                          "line": "#GOOGLE_GEOCODING_API_GEOCODE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'address=%(address)s'\n",
                          "lineNumber": 27,
                          "lineChange": "added"
                        },
                        {
                          "line": "#GOOGLE_GEOCODING_API_REVERSE_URL = GOOGLE_GEOCODING_API_BASE_URL + 'latlng=%(latlng)s'\n",
                          "lineNumber": 28,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "class Usage(Exception):\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def __init__(self, msg):\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.msg = msg\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "def main(argv = None):\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    OPT_STR = 'hgr'\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "    OPT_LIST = [\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "        'help',\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "        'geocode',\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "        'resolve',\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    ]\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    is_geocode = True\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if argv is None:\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "        argv = sys.argv\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "    try:\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "        try:\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "            progname = argv[0]\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "            opts, args = getopt.getopt(argv[1:],\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                       OPT_STR,\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                       OPT_LIST)\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "        except getopt.error, msg:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "             raise Usage(msg)\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # process options\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "        for o, a in opts:\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if o in ('-h', '--help'):\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "                print __doc__\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "                sys.exit(0)\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "            elif o in ('-g', '--geocode'):\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "                is_geocode = True\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "            elif o in ('-r', '--resolve'):\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "                is_geocode = False\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if is_geocode and len(args) == 1:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            address = args[0]\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "            latitude, longitude = get_latlng(address)\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "            print '%s,%s' % (latitude, longitude,)\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        elif not is_geocode and len(args) == 2:\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "            latitude = args[0]\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "            longitude = args[1]\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "            address = reverse_geocode(latitude, longitude)\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "            print address\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "        else:\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "            raise Usage('Incorrect arguments')\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "                \n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    except Usage, err:\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        print >> sys.stderr, err.msg\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        print >> sys.stderr, \"for help use --help\"\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return 3.14159\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "def get_latlng(address):\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "    address_query = urllib.quote(address, '')\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "    values = {\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "        'format' : 'json',\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "'sensor' : 'false',\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "'address' : address_query,\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "    }\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "    url = GOOGLE_GEOCODING_API_GEOCODE_URL % values\n",
                          "lineNumber": 83,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    response = requests.get(url)\n",
                          "lineNumber": 84,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    key = htk_setting('HTK_GOOGLE_GEOCODING_API_KEY', None)\n",
                          "lineNumber": 83,
                          "lineChange": "added"
                        },
                        {
                          "line": "    if key:\n",
                          "lineNumber": 84,
                          "lineChange": "added"
                        },
                        {
                          "line": "        params['key'] = key\n",
                          "lineNumber": 85,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 86,
                          "lineChange": "added"
                        },
                        {
                          "line": "    response = requests.get(GOOGLE_GEOCODING_API_URL, params=params)\n",
                          "lineNumber": 87,
                          "lineChange": "added"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 4,
                  "cwe": [
                    "CWE-918"
                  ]
                }
              },
              {
                "id": "python/DisablesCSRFProtection/test",
                "name": "DisablesCSRFProtection/test",
                "shortDescription": {
                  "text": "Cross-Site Request Forgery (CSRF)"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n## Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "DisablesCSRFProtection",
                    "Security",
                    "InTest"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/Ryuchen/Bistu/commit/e9658737a08c2db6fd2f988f8a2e5d45225cce53?diff=split#diff-c63e4109a52757d080e6ccd45c49783c0f249203cc93fff1813340a1dc6e90ecL-1",
                      "lines": [
                        {
                          "line": "\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "@csrf_exempt\n",
                          "lineNumber": 67,
                          "lineChange": "removed"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 3,
                  "cwe": [
                    "CWE-352"
                  ]
                }
              },
              {
                "id": "python/AuthOverHttp",
                "name": "AuthOverHttp",
                "shortDescription": {
                  "text": "Authentication over HTTP"
                },
                "defaultConfiguration": {
                  "level": "warning"
                },
                "help": {
                  "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "AuthOverHttp",
                    "Security"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/CiscoDevNet/netprog_basics/commit/6a4baaa1e8f8956b28381139f7ac7c255b4781f0?diff=split#diff-ce4d54c9e3a19901718e322d40f7b833e6ee82f1837f6cb3681791ca26f3e442L-1",
                      "lines": [
                        {
                          "line": "url = 'http://10.10.20.58/ins'\n",
                          "lineNumber": 21,
                          "lineChange": "removed"
                        },
                        {
                          "line": "switchuser = 'admin'\n",
                          "lineNumber": 22,
                          "lineChange": "removed"
                        },
                        {
                          "line": "switchpassword = 'cisco123'\n",
                          "lineNumber": 23,
                          "lineChange": "removed"
                        },
                        {
                          "line": "url = \"https://sbx-nxos-mgmt.cisco.com/ins\"\n",
                          "lineNumber": 25,
                          "lineChange": "added"
                        },
                        {
                          "line": "switchuser = \"admin\"\n",
                          "lineNumber": 26,
                          "lineChange": "added"
                        },
                        {
                          "line": "switchpassword = \"Admin_1234!\"\n",
                          "lineNumber": 27,
                          "lineChange": "added"
                        },
                        {
                          "line": "myheaders = {'content-type': 'application/json'}\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Configuration Payload\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "payload = {\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "  \"ins_api\": {\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"version\": \"1.0\",\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"type\": \"cli_conf\",\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"chunk\": \"0\",\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"sid\": \"1\",\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"input\": \"vlan 101 ;name Web_VLAN ;vlan 102 ;name App_VLAN ;vlan 103 ;name Data_VLAN\", # noqa\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"output_format\": \"json\"\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "  }\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "}\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Send Configuration\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "response = requests.post(\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/CiscoDevNet/netprog_basics/commit/be5bc944588144bbbab335b82e15ff6fd2025f11?diff=split#diff-4b798397ed4ec2b2c049472082392e0b339ebf5cd77d1d80294f1d18fc1b9f17L-1",
                      "lines": [
                        {
                          "line": "url='http://10.10.20.58/ins'\n",
                          "lineNumber": 25,
                          "lineChange": "removed"
                        },
                        {
                          "line": "switchuser='admin'\n",
                          "lineNumber": 26,
                          "lineChange": "removed"
                        },
                        {
                          "line": "switchpassword='cisco123'\n",
                          "lineNumber": 27,
                          "lineChange": "removed"
                        },
                        {
                          "line": "url = \"https://sbx-nxos-mgmt.cisco.com/ins\"\n",
                          "lineNumber": 29,
                          "lineChange": "added"
                        },
                        {
                          "line": "switchuser = \"admin\"\n",
                          "lineNumber": 30,
                          "lineChange": "added"
                        },
                        {
                          "line": "switchpassword = \"Admin_1234!\"\n",
                          "lineNumber": 31,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/infobip/oneapi-python/commit/86a453f6542726171923f693e22b4907427b682c?diff=split#diff-467a31e837480b8f2c0017456a9cc0c05dd38e3485a56196ae8cd54b934f2342L-1",
                      "lines": [
                        {
                          "line": "DEFAULT_BASE_URL = 'http://api.parseco.com'\n",
                          "lineNumber": 13,
                          "lineChange": "removed"
                        },
                        {
                          "line": "DEFAULT_BASE_URL = 'https://api.parseco.com'\n",
                          "lineNumber": 13,
                          "lineChange": "added"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 2,
                  "cwe": [
                    "CWE-319"
                  ]
                }
              },
              {
                "id": "python/TarSlip/test",
                "name": "TarSlip/test",
                "shortDescription": {
                  "text": "Arbitrary File Write via Archive Extraction (Tar Slip)"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "## Details\n\nZip Slip is a form of directory traversal that can be exploited by extracting files from an archive. The premise of the directory traversal vulnerability is that an attacker can gain access to parts of the file system outside of the target folder in which they should reside. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim’s machine. The vulnerability can also cause damage by overwriting configuration files or other sensitive resources, and can be exploited on both client (user) machines and servers.\n\n## Example\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "TarSlip",
                    "Security",
                    "InTest"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 0,
                  "cwe": [
                    "CWE-22"
                  ]
                }
              },
              {
                "id": "python/NoHardcodedCredentials",
                "name": "NoHardcodedCredentials",
                "shortDescription": {
                  "text": "Use of Hardcoded Credentials"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "NoHardcodedCredentials",
                    "Security"
                  ],
                  "categories": [
                    "Security"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/yevhenradchenko/bamboohr-parser/commit/2d5ebed54b630c461ecde9db1ca8a880e1080d4f?diff=split#diff-51d19aaaff78dcc4e5e0629e5998f79377b1f71ee550e8525987b5a585e8c379L-1",
                      "lines": [
                        {
                          "line": "import config\n",
                          "lineNumber": 5,
                          "lineChange": "added"
                        },
                        {
                          "line": "import requests\n",
                          "lineNumber": 6,
                          "lineChange": "none"
                        },
                        {
                          "line": "import json\n",
                          "lineNumber": 7,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 9,
                          "lineChange": "none"
                        },
                        {
                          "line": "Base = declarative_base()\n",
                          "lineNumber": 10,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 11,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "class EmployeeData(Base):\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "    __tablename__ = 'employee_data'\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "    id = Column(Integer, primary_key=True)\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "    name = Column(String(120))\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "    department = Column(String(120))\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "    jobTitle = Column(String(120))\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "    email = Column(String(120))\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "    mobilePhone = Column(String(120))\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "    def __init__(self, name, department, jobTitle, email, id, mobilePhone):\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.name = name\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.department = department\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.jobTitle = jobTitle\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.email = email\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.id = id\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "        self.mobilePhone = mobilePhone\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "engine = create_engine('sqlite:///employee_db.db')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "connection = engine.connect()\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "Base.metadata.create_all(engine)\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "api_key = 'YOURS_BAMBOOHR_APIKEY'\n",
                          "lineNumber": 38,
                          "lineChange": "removed"
                        },
                        {
                          "line": "url = 'https://' + api_key + ':x@api.bamboohr.com/api/gateway.php/DOMAIN_NAME/v1/employees/directory'\n",
                          "lineNumber": 39,
                          "lineChange": "removed"
                        },
                        {
                          "line": "url = 'https://' + config.API_KEY + ':x@api.bamboohr.com/api/gateway.php/' + config.DOMAIN +'/v1/employees/directory'\n",
                          "lineNumber": 39,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/abersheeran/websocks/commit/76cd2cf07b5b1c63994c4627474e4efa4d8e8de8?diff=split#diff-2eaea93a04442331f03fc1e80b20e85bffe9f8479a3c196b7da91c4f33ccef93L-1",
                      "lines": [
                        {
                          "line": "username = \"abersheeran\"\n",
                          "lineNumber": 14,
                          "lineChange": "removed"
                        },
                        {
                          "line": "password = \"websocks\"\n",
                          "lineNumber": 15,
                          "lineChange": "removed"
                        },
                        {
                          "line": "username = os.environ['WEBSOCKS_USER']\n",
                          "lineNumber": 15,
                          "lineChange": "added"
                        },
                        {
                          "line": "password = os.environ['WEBSOCKS_PASS']\n",
                          "lineNumber": 16,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/blacknbunny/CVE-2018-10933/commit/f6c74445263d37af575ab3aee65e163f3c95e6b8?diff=split#diff-35181191f6c2da1b4aece960ff86f898381798d12642710da4ce8793deb4aa59L-1",
                      "lines": [
                        {
                          "line": "import sys, paramiko, logging\n",
                          "lineNumber": 0,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 1,
                          "lineChange": "none"
                        },
                        {
                          "line": "new_auth_accept = paramiko.auth_handler.AuthHandler._handler_table[paramiko.common.MSG_USERAUTH_SUCCESS]\n",
                          "lineNumber": 2,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 3,
                          "lineChange": "none"
                        },
                        {
                          "line": "def auth_accept(*args, **kwargs): return new_auth_accept(*args, **kwargs)\n",
                          "lineNumber": 4,
                          "lineChange": "none"
                        },
                        {
                          "line": " \n",
                          "lineNumber": 5,
                          "lineChange": "none"
                        },
                        {
                          "line": "paramiko.auth_handler.AuthHandler._handler_table.update({paramiko.common.MSG_USERAUTH_REQUEST: auth_accept,})\n",
                          "lineNumber": 6,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 7,
                          "lineChange": "none"
                        },
                        {
                          "line": "logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 9,
                          "lineChange": "none"
                        },
                        {
                          "line": "client = paramiko.SSHClient()\n",
                          "lineNumber": 10,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 11,
                          "lineChange": "none"
                        },
                        {
                          "line": "client.set_missing_host_key_policy(paramiko.WarningPolicy())\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "client.connect(\"127.0.0.1\", port=2222, username=\"root\", password=\"\", pkey=None, key_filename=\"fake.key\")\n",
                          "lineNumber": 14,
                          "lineChange": "removed"
                        },
                        {
                          "line": "client.connect(sys.argv[1], port=int(sys.argv[2]), username=sys.argv[3], password=\"\", pkey=None, key_filename=sys.argv[4])\n",
                          "lineNumber": 14,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 15,
                          "lineChange": "added"
                        },
                        {
                          "line": "command = sys.argv[5]\n",
                          "lineNumber": 16,
                          "lineChange": "added"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 42,
                  "cwe": [
                    "CWE-798"
                  ]
                }
              }
            ]
          }
        },
        "results": [
          {
            "ruleId": "python/OR",
            "ruleIndex": 0,
            "level": "warning",
            "message": {
              "text": "Unsanitized input from a web form flows into flask.redirect, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to redirect the user. This may result in an Open Redirect vulnerability.",
              "arguments": [
                "[a web form](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
                "[flask.redirect](12)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/app/routes_organization_user_management.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 83,
                    "endLine": 83,
                    "startColumn": 16,
                    "endColumn": 24
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "98535ec1d5e7b1a2753ba94c8e28f997f67c1329d7fbe8ed1fefdf8c3e9e2463",
              "1": "8e0e15b6.993139d5.a406b245.b6661f3a.b4853ee8.ba14daf2.0a7337bb.b60afa86.129db901.689b46eb.a406b245.b6661f3a.89a7456e.ba14daf2.7e8da20f.e4d05e2e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 67,
                              "endLine": 67,
                              "startColumn": 19,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 67,
                              "endLine": 67,
                              "startColumn": 19,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 67,
                              "endLine": 67,
                              "startColumn": 9,
                              "endColumn": 46
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 75,
                              "endLine": 75,
                              "startColumn": 61,
                              "endColumn": 68
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 75,
                              "endLine": 75,
                              "startColumn": 27,
                              "endColumn": 60
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 75,
                              "endLine": 75,
                              "startColumn": 9,
                              "endColumn": 69
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 76,
                              "endLine": 76,
                              "startColumn": 12,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 76,
                              "endLine": 76,
                              "startColumn": 55,
                              "endColumn": 70
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 80,
                              "endLine": 80,
                              "startColumn": 23,
                              "endColumn": 38
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 76,
                              "endColumn": 91
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 76,
                              "endColumn": 104
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 25,
                              "endColumn": 106
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/app/routes_organization_user_management.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 503,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT",
            "ruleIndex": 1,
            "level": "warning",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6)",
                "[open](7)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "bin/snapshot_db_to_raw.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 26,
                    "endLine": 26,
                    "startColumn": 14,
                    "endColumn": 18
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "88971103010014e0b4c671072589b0e8007d66a82ccb6cb09ce1111be58fd8d9",
              "1": "7b0793b4.1139c8fd.187bf175.1e2c0147.f3eda546.addfbd48.56d0fa7e.4201a018.a6b41d6e.be004016.187bf175.8fe16fe0.c8b7d5cc.addfbd48.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 26,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 26,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 26,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 9,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 48,
                              "endLine": 48,
                              "startColumn": 14,
                              "endColumn": 28
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 23,
                              "endLine": 23,
                              "startColumn": 10,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 26,
                              "endLine": 26,
                              "startColumn": 19,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 26,
                              "endLine": 26,
                              "startColumn": 14,
                              "endColumn": 18
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 562,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT",
            "ruleIndex": 1,
            "level": "warning",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
                "[open](9)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "bin/bson_to_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 12,
                    "endLine": 12,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "21bbbecfb189601d030f5aa5e6f682206e9f8bd1edcd873605b07b4a494d47b6",
              "1": "a6b41d6e.09b47a5b.187bf175.139c59a8.f3eda546.ba14daf2.a2237efa.f46ed94e.a6b41d6e.6adcd37f.187bf175.a2296575.f3eda546.fbcd50ec.f6dc7859.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 31,
                              "endLine": 31,
                              "startColumn": 12,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 31,
                              "endLine": 31,
                              "startColumn": 12,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 31,
                              "endLine": 31,
                              "startColumn": 5,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 18,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 18,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 5,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 26,
                              "endColumn": 36
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 10,
                              "endLine": 10,
                              "startColumn": 26,
                              "endColumn": 36
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 12,
                              "endLine": 12,
                              "startColumn": 15,
                              "endColumn": 25
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 12,
                              "endLine": 12,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 562,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT",
            "ruleIndex": 1,
            "level": "warning",
            "message": {
              "text": "Unsanitized input from a command line argument flows into json.dump, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
                "[json.dump](10)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "bin/snapshot_db_to_raw.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 34,
                    "endLine": 34,
                    "startColumn": 13,
                    "endColumn": 22
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "f92cacf12ea295e4e57a1a4086067cad8e3890ecfbe62c9f187e21f5e97b2a45",
              "1": "2d06e3d6.a215d38b.187bf175.139c59a8.175c247b.111d979a.b04a166b.545e9171.a26fbc37.04ad2656.187bf175.42be51cd.b9abe432.111d979a.da22a5d6.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 27,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 27,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 27,
                              "endColumn": 38
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 9,
                              "endColumn": 38
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 48,
                              "endLine": 48,
                              "startColumn": 30,
                              "endColumn": 45
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 23,
                              "endLine": 23,
                              "startColumn": 26,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 19,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 14,
                              "endColumn": 18
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 44,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 36,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/snapshot_db_to_raw.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 13,
                              "endColumn": 22
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 562,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT",
            "ruleIndex": 1,
            "level": "warning",
            "message": {
              "text": "Unsanitized input from a command line argument flows into json.dump, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
                "[json.dump](18)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "bin/bson_to_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 21,
                    "endLine": 21,
                    "startColumn": 13,
                    "endColumn": 22
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "3b0e529b806c1f7d738f1a47ed50c68a675597d23e4a9942c4064bdf5316e7d0",
              "1": "2d06e3d6.590535da.187bf175.139c59a8.cf0d71c7.111d979a.081ac3f4.545e9171.a6b41d6e.e271b6fc.187bf175.a2296575.cf0d71c7.111d979a.f6dc7859.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 31,
                              "endLine": 31,
                              "startColumn": 12,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 31,
                              "endLine": 31,
                              "startColumn": 12,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 31,
                              "endLine": 31,
                              "startColumn": 5,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 18,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 18,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 5,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 26,
                              "endColumn": 36
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 10,
                              "endLine": 10,
                              "startColumn": 26,
                              "endColumn": 36
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 12,
                              "endLine": 12,
                              "startColumn": 15,
                              "endColumn": 25
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 36,
                              "endColumn": 46
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 19,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 19,
                              "endColumn": 50
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 19,
                              "endColumn": 60
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 5,
                              "endColumn": 60
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 14,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 19,
                              "endLine": 19,
                              "startColumn": 15,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 15,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 19,
                              "endLine": 19,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 16,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 19,
                              "endLine": 19,
                              "startColumn": 36,
                              "endColumn": 45
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 17,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 21,
                              "endLine": 21,
                              "startColumn": 29,
                              "endColumn": 38
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 18,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/bson_to_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 21,
                              "endLine": 21,
                              "startColumn": 13,
                              "endColumn": 22
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 562,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4)",
                "[open](5)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/strip_ansi.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "58898b6cd1eb3825094d510e1e56509168311a1f64415382576b29a5617c12ff",
              "1": "2e8ddaeb.f8545116.187bf175.139c59a8.145e7f2f.ba14daf2.a2237efa.f46ed94e.2e8ddaeb.4d8ae9af.6f72df8b.139c59a8.c8b7d5cc.ba14daf2.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 4,
                              "endLine": 4,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2)",
                "[open](3)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/compare_coverage_result_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 62,
                    "endLine": 62,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "0b5a39c765b26bd38a8751ec57defacab49ce29dbfad9a04b321be3c1d8a956d",
              "1": "a6b41d6e.b377bf81.187bf175.139c59a8.c8b7d5cc.addfbd48.a2237efa.f46ed94e.a6b41d6e.be004016.187bf175.5bc6639a.c8b7d5cc.b1660bad.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 15,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2)",
                "[open](3)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/compare_coverage_result_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 65,
                    "endLine": 65,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "2c4378fedc12a578c6d3a5084c523cdb975656fb6122124f4012a44d91814c9a",
              "1": "a6b41d6e.09b47a5b.187bf175.139c59a8.f3eda546.addfbd48.a2237efa.f46ed94e.a6b41d6e.be004016.187bf175.5bc6639a.c8b7d5cc.addfbd48.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 15,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/compare_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6)",
                "[open](7)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/write_coverage_result_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 17,
                    "endLine": 17,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "c0415d02a45af0fdb4f972eeab27cf79654c0c8fa268326447f1a93be5c19bf5",
              "1": "8203b9ae.b6b53fe2.187bf175.5dbe487e.f3eda546.addfbd48.081ac3f4.0a043b68.17668122.be004016.187bf175.5dbe487e.c8b7d5cc.cc23d089.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 33,
                              "endColumn": 42
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 15,
                              "endLine": 15,
                              "startColumn": 12,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 28,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 15,
                              "endColumn": 52
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
                "[open](13)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/write_coverage_result_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 22,
                    "endLine": 22,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "194b69ed5005b4e343f11a5f932bc9f0fa8052eec4620635ec6a291847dcad96",
              "1": "4ad9bc96.ecc4e7fd.187bf175.4a95692a.f3eda546.addfbd48.75d4ed92.b60afa86.17668122.be004016.187bf175.5bc6639a.c8b7d5cc.addfbd48.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 33,
                              "endColumn": 42
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 15,
                              "endLine": 15,
                              "startColumn": 12,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 28,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 20,
                              "endLine": 20,
                              "startColumn": 32,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 20,
                              "endLine": 20,
                              "startColumn": 15,
                              "endColumn": 43
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 20,
                              "endLine": 20,
                              "startColumn": 5,
                              "endColumn": 43
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 21,
                              "endLine": 21,
                              "startColumn": 17,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 21,
                              "endLine": 21,
                              "startColumn": 14,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 21,
                              "endLine": 21,
                              "startColumn": 5,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 22,
                              "endLine": 22,
                              "startColumn": 15,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 22,
                              "endLine": 22,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2)",
                "[open](3)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "demo/create_test_users.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 62,
                    "endLine": 62,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "a67a701c40007f7d54a7cbd92e67f30c6ca5a213aa65df12b02f579d98ee6a71",
              "1": "a6b41d6e.b377bf81.187bf175.139c59a8.c8b7d5cc.addfbd48.a2237efa.f46ed94e.a6b41d6e.b377bf81.187bf175.5f8952c4.c8b7d5cc.31a96f2a.a2237efa.3acd807d"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "demo/create_test_users.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "demo/create_test_users.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "demo/create_test_users.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 15,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "demo/create_test_users.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 62,
                              "endLine": 62,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 389,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7)",
                "[open](8)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/all/write_coverage_results_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 17,
                    "endLine": 17,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "c148cdfaba1009cd52d629a60fe2e69a08c74f23eb81ecde58fbe1d23019e0e7",
              "1": "4ad9bc96.ecc4e7fd.187bf175.4a95692a.f3eda546.addfbd48.75d4ed92.b60afa86.17668122.68ceae95.187bf175.5bc6639a.c8b7d5cc.addfbd48.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 33,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 33,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 17,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 14,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 5,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 15,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
                "[open](9)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/check_test_results.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "05dbeabb37f12b45d083869c9a95c8df84516b89aa947e50f3c386b79646f1f9",
              "1": "e34e1fea.ecc4e7fd.187bf175.1e2c0147.145e7f2f.addfbd48.75d4ed92.b60afa86.a6b41d6e.be004016.187bf175.3cdfe3a6.c8b7d5cc.a5d7f69f.21e72ca7.6aac30d8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 112,
                              "endLine": 112,
                              "startColumn": 12,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 112,
                              "endLine": 112,
                              "startColumn": 12,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 112,
                              "endLine": 112,
                              "startColumn": 5,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 113,
                              "endLine": 113,
                              "startColumn": 16,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 113,
                              "endLine": 113,
                              "startColumn": 16,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 113,
                              "endLine": 113,
                              "startColumn": 5,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 114,
                              "endLine": 114,
                              "startColumn": 44,
                              "endColumn": 52
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 7,
                              "endLine": 7,
                              "startColumn": 26,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_test_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 389,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
                "[open](9)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/check_pylint_scan_results.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 8,
                    "endLine": 8,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "26fe173ca48d5a3d0c79017488f875e071af4f2c26c568a6ec2457523280eb09",
              "1": "e34e1fea.f8545116.187bf175.1e2c0147.145e7f2f.addfbd48.081ac3f4.4201a018.43d028e8.be004016.187bf175.3cdfe3a6.c8b7d5cc.a5d7f69f.a2237efa.6aac30d8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 12,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 12,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 5,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 70,
                              "endLine": 70,
                              "startColumn": 16,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 70,
                              "endLine": 70,
                              "startColumn": 16,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 70,
                              "endLine": 70,
                              "startColumn": 5,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 71,
                              "endLine": 71,
                              "startColumn": 44,
                              "endColumn": 52
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 7,
                              "endLine": 7,
                              "startColumn": 26,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/check_pylint_scan_results.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 389,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5)",
                "[open](6)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/strip_ansi.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 11,
                    "endLine": 11,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "5f88cf6e443632d24bfd98c9d683afce42cee929cfda11fb799c3d806f077594",
              "1": "2e8ddaeb.f8545116.187bf175.ef463c52.145e7f2f.ba14daf2.a2237efa.f46ed94e.2e8ddaeb.2070386b.6f72df8b.139c59a8.4608c58f.ba14daf2.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 4,
                              "endLine": 4,
                              "startColumn": 16,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 11,
                              "endLine": 11,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/strip_ansi.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 11,
                              "endLine": 11,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)",
                "[open](12)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/scripts/write_coverage_result_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 39,
                    "endLine": 39,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "58fad69b9a21a565744c3e11b4ec132b9918b7fc5448dc5942b089a851becfcc",
              "1": "fc1592c8.8a88c2b4.187bf175.4a95692a.f3eda546.7cc86760.081ac3f4.b60afa86.17668122.ecc4e7fd.187bf175.139c59a8.4608c58f.7cc86760.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 56,
                              "endLine": 56,
                              "startColumn": 33,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 33,
                              "endColumn": 42
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 15,
                              "endLine": 15,
                              "startColumn": 12,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 28,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 20,
                              "endLine": 20,
                              "startColumn": 32,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 20,
                              "endLine": 20,
                              "startColumn": 15,
                              "endColumn": 43
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 20,
                              "endLine": 20,
                              "startColumn": 5,
                              "endColumn": 43
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 21,
                              "endLine": 21,
                              "startColumn": 17,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 39,
                              "endLine": 39,
                              "startColumn": 18,
                              "endColumn": 25
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 39,
                              "endLine": 39,
                              "startColumn": 15,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/scripts/write_coverage_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 39,
                              "endLine": 39,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6)",
                "[open](7)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/all/write_coverage_results_json.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 34,
                    "endLine": 34,
                    "startColumn": 10,
                    "endColumn": 14
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "e4898e866825c1e286175d3c390b2e3c75ce7309a41ecef75039147f93a25bcc",
              "1": "fc1592c8.8a88c2b4.187bf175.4a95692a.f3eda546.7cc86760.081ac3f4.b60afa86.17668122.68ceae95.187bf175.139c59a8.4608c58f.7cc86760.a2237efa.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 33,
                              "endColumn": 41
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 33,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 8,
                              "endLine": 8,
                              "startColumn": 33,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 17,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 18,
                              "endColumn": 25
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 15,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/all/write_coverage_results_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 439,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from an environment variable flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from an environment variable {0} into {1}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[flows](0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
                "[open](13)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/conftest.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 69,
                    "endLine": 69,
                    "startColumn": 5,
                    "endColumn": 28
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "3701a2e87aa021bf923654e91f1182b3c203cf85576ad355cc1c9dd9144a0a27",
              "1": "e06468b8.ecc4e7fd.f0c947fe.fe13908d.275ea9f3.5cf7e38b.94082763.ddca76e6.cc174015.ecc4e7fd.f0c947fe.41a7b326.1cd10918.5cf7e38b.94082763.ddca76e6"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conftest.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 17,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conftest.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 17,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conftest.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 5,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conftest.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 66,
                              "endLine": 66,
                              "startColumn": 8,
                              "endColumn": 17
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conftest.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 68,
                              "endLine": 68,
                              "startColumn": 12,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conftest.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 47,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 7,
                              "endLine": 7,
                              "startColumn": 47,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 14,
                              "endLine": 14,
                              "startColumn": 12,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 16,
                              "endLine": 16,
                              "startColumn": 28,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 64,
                              "endLine": 64,
                              "startColumn": 33,
                              "endColumn": 42
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 64,
                              "endLine": 64,
                              "startColumn": 16,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 64,
                              "endLine": 64,
                              "startColumn": 5,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 15,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/scripts/write_test_result_json.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 65,
                              "endLine": 65,
                              "startColumn": 10,
                              "endColumn": 14
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 389,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/HardcodedNonCryptoSecret/test",
            "ruleIndex": 3,
            "level": "note",
            "message": {
              "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
              "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
              "arguments": [
                "[a hardcoded string](0)",
                "[here](1)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/unit/apis/test_webhooks.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 17,
                    "endLine": 17,
                    "startColumn": 5,
                    "endColumn": 11
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "ba7722ad443ee27c577e2d236eacbe8adc4f4cdcea7dca40103f2bc5a59794c8",
              "1": "06ad6994.52a22129.0cc0274b.ccfe1c12.7c1ef228.01046d07.3d368b4c.ebed174f.06ad6994.52a22129.0cc0274b.ccfe1c12.7c1ef228.01046d07.3d368b4c.ebed174f"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 14,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 5,
                              "endColumn": 11
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 412,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/HardcodedNonCryptoSecret/test",
            "ruleIndex": 3,
            "level": "note",
            "message": {
              "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
              "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
              "arguments": [
                "[a hardcoded string](0)",
                "[here](1)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/unit/apis/test_webhooks.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 18,
                    "endLine": 18,
                    "startColumn": 74,
                    "endColumn": 80
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "8b0f772151fff021821d4197e2d2a49fa3c22e91fbfecb702b22a40ee6bd85c8",
              "1": "e88ac817.52a22129.0cc0274b.139c59a8.40ad7b82.ba14daf2.3d368b4c.ddd53264.e88ac817.52a22129.0cc0274b.139c59a8.40ad7b82.ba14daf2.3d368b4c.ddd53264"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 18,
                              "endLine": 18,
                              "startColumn": 74,
                              "endColumn": 80
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 18,
                              "endLine": 18,
                              "startColumn": 74,
                              "endColumn": 80
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 412,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/HardcodedNonCryptoSecret/test",
            "ruleIndex": 3,
            "level": "note",
            "message": {
              "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
              "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
              "arguments": [
                "[a hardcoded string](0)",
                "[here](1)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/unit/apis/test_webhooks.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 71,
                    "endLine": 71,
                    "startColumn": 5,
                    "endColumn": 11
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "388f14040dbc6581d9b7183c7cce0fe6bddc16663685ba76d0e1f8abebd55d60",
              "1": "06ad6994.52a22129.0cc0274b.ccfe1c12.1845b33f.01046d07.3d368b4c.ebed174f.06ad6994.52a22129.0cc0274b.ccfe1c12.1845b33f.01046d07.3d368b4c.ebed174f"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 71,
                              "endLine": 71,
                              "startColumn": 14,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 71,
                              "endLine": 71,
                              "startColumn": 5,
                              "endColumn": 11
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 412,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/HardcodedNonCryptoSecret/test",
            "ruleIndex": 3,
            "level": "note",
            "message": {
              "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
              "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
              "arguments": [
                "[a hardcoded string](0)",
                "[here](1)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/unit/apis/test_webhooks.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 72,
                    "endLine": 72,
                    "startColumn": 74,
                    "endColumn": 80
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "534c06992066bcb30c59a3107a990a670bc93b55261107de6fcc20b1d4929f99",
              "1": "e88ac817.52a22129.0cc0274b.139c59a8.40ad7b82.ba14daf2.3d368b4c.ddd53264.e88ac817.52a22129.0cc0274b.139c59a8.1845b33f.ba14daf2.3d368b4c.ddd53264"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 72,
                              "endLine": 72,
                              "startColumn": 74,
                              "endColumn": 80
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/apis/test_webhooks.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 72,
                              "endLine": 72,
                              "startColumn": 74,
                              "endColumn": 80
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 412,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/DisablesCSRFProtection",
            "ruleIndex": 4,
            "level": "warning",
            "message": {
              "text": "CSRF protection is disabled by exempt. This allows the attackers to execute requests on a user's behalf.",
              "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
              "arguments": [
                "[exempt](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/server.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 209,
                    "endLine": 209,
                    "startColumn": 5,
                    "endColumn": 16
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "d106ca7e0410e42a6ecfe62004eef12863dcf59cf864c150c512f58601d41c59",
              "1": "b5195c52.dbdcad58.79e62dc9.139c59a8.9699ebe3.ba14daf2.081ac3f4.08e3ac82.f12fd8ef.dbdcad58.6c6e7e3c.139c59a8.9699ebe3.d5a325b2.431fd5d3.08e3ac82"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/server.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 209,
                              "endLine": 209,
                              "startColumn": 5,
                              "endColumn": 16
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 556,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/DisablesCSRFProtection",
            "ruleIndex": 4,
            "level": "warning",
            "message": {
              "text": "CSRF protection is disabled by exempt. This allows the attackers to execute requests on a user's behalf.",
              "markdown": "CSRF protection is disabled by {0}. This allows the attackers to execute requests on a user's behalf.",
              "arguments": [
                "[exempt](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/server.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 253,
                    "endLine": 253,
                    "startColumn": 5,
                    "endColumn": 16
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "91258a17da10d96d41daaca287abf8d00df3f0bdd98af8bfad6bd40cde6dc893",
              "1": "b5195c52.dbdcad58.79e62dc9.139c59a8.9699ebe3.ba14daf2.081ac3f4.08e3ac82.f12fd8ef.dbdcad58.6c6e7e3c.139c59a8.9699ebe3.d5a325b2.431fd5d3.08e3ac82"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/server.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 253,
                              "endLine": 253,
                              "startColumn": 5,
                              "endColumn": 16
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 556,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/Ssrf",
            "ruleIndex": 5,
            "level": "warning",
            "message": {
              "text": "Unsanitized input from a command line argument flows into requests.get, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server Side Request Forgery vulnerability.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
                "[requests.get](10)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/scripts/compare_indexes.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 17,
                    "endLine": 17,
                    "startColumn": 16,
                    "endColumn": 28
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "7121f9f806caceb113619af811bbbea5b5cda06e68a3aeababa96045a3e553c6",
              "1": "2b627c13.2da3d253.ef7ad415.139c59a8.25ac000c.786f7372.75d4ed92.8794408a.101172a8.2da3d253.c2a938c6.139c59a8.25ac000c.a5d7f69f.cc914b1e.f46ed94e"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 19,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 19,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 19,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 5,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 53,
                              "endLine": 53,
                              "startColumn": 40,
                              "endColumn": 51
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 13,
                              "endLine": 13,
                              "startColumn": 25,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 14,
                              "endLine": 14,
                              "startColumn": 11,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 14,
                              "endLine": 14,
                              "startColumn": 11,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 14,
                              "endLine": 14,
                              "startColumn": 5,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 29,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/scripts/compare_indexes.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 17,
                              "endLine": 17,
                              "startColumn": 16,
                              "endColumn": 28
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 503,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/DisablesCSRFProtection/test",
            "ruleIndex": 6,
            "level": "note",
            "message": {
              "text": "CSRF protection is disabled by setting the value to _. This allows the attackers to execute requests on a user's behalf.",
              "markdown": "CSRF protection is disabled by setting the value to {0}. This allows the attackers to execute requests on a user's behalf.",
              "arguments": [
                "[_](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/helpers/unit/app/helpers.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 51,
                    "endLine": 51,
                    "startColumn": 5,
                    "endColumn": 43
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "bb383523840caa6671674584147d759cd8b2f08efc195f2f8894b80e89fad5d3",
              "1": "16691f08.a1643a96.79e62dc9.139c59a8.cc857d4e.57d888ee.cbfa2b68.e6401ad6.16691f08.2da3d253.79e62dc9.139c59a8.f4f10911.786f7372.cbfa2b68.e6401ad6"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/helpers/unit/app/helpers.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 5,
                              "endColumn": 43
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 359,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/DisablesCSRFProtection/test",
            "ruleIndex": 6,
            "level": "note",
            "message": {
              "text": "CSRF protection is disabled by setting the value to _. This allows the attackers to execute requests on a user's behalf.",
              "markdown": "CSRF protection is disabled by setting the value to {0}. This allows the attackers to execute requests on a user's behalf.",
              "arguments": [
                "[_](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/unit/app/test_routes_organizations.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 301,
                    "endLine": 301,
                    "startColumn": 5,
                    "endColumn": 43
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "6186854fe502f80d1d953e359edae8af720ffb419135fc0687eeb36f383668da",
              "1": "e61583ec.a1643a96.79e62dc9.139c59a8.6d1aee36.57d888ee.cbfa2b68.e6401ad6.e61583ec.a1643a96.79e62dc9.139c59a8.6d1aee36.a1632d4f.cbfa2b68.e6401ad6"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/app/test_routes_organizations.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 301,
                              "endLine": 301,
                              "startColumn": 5,
                              "endColumn": 43
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 409,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/DisablesCSRFProtection/test",
            "ruleIndex": 6,
            "level": "note",
            "message": {
              "text": "CSRF protection is disabled by setting the value to _. This allows the attackers to execute requests on a user's behalf.",
              "markdown": "CSRF protection is disabled by setting the value to {0}. This allows the attackers to execute requests on a user's behalf.",
              "arguments": [
                "[_](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/unit/app/test_routes_organizations.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 332,
                    "endLine": 332,
                    "startColumn": 5,
                    "endColumn": 43
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "05bced30bd031bc0223a6a79640a6e0d275a1bfb0b7c26b826b3099fdd11925d",
              "1": "16691f08.a1643a96.79e62dc9.139c59a8.cc857d4e.57d888ee.cbfa2b68.e6401ad6.16691f08.9cc7155a.79e62dc9.139c59a8.cc857d4e.a1632d4f.cbfa2b68.e6401ad6"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/unit/app/test_routes_organizations.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 332,
                              "endLine": 332,
                              "startColumn": 5,
                              "endColumn": 43
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 409,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/AuthOverHttp",
            "ruleIndex": 7,
            "level": "warning",
            "message": {
              "text": "requests.post performs an authentication WITH http://localhost:/api/v1/projects/test-organization/evidence/commit/generic over the HTTP. Use https instead",
              "markdown": "{0} performs an authentication WITH {1} over the HTTP. Use https instead",
              "arguments": [
                "[requests.post](0)",
                "[http://localhost:/api/v1/projects/test-organization/evidence/commit/generic](1)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "bin/send_json_and_file_with_client.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 30,
                    "endLine": 30,
                    "startColumn": 5,
                    "endColumn": 18
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "c7ddf5b502577cb07f96201747455a8ae0b1b5734ff6f960c572d5a2dd52ab1d",
              "1": "e4d20981.9e28a386.3b7b86da.edcf1db9.25ac000c.ba14daf2.9bd820d1.742d9b21.e4d20981.9e28a386.3b7b86da.edcf1db9.25ac000c.ba14daf2.9bd820d1.742d9b21"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/send_json_and_file_with_client.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 5,
                              "endColumn": 18
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "bin/send_json_and_file_with_client.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 19,
                              "endLine": 19,
                              "startColumn": 7,
                              "endColumn": 84
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 503,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/TarSlip/test",
            "ruleIndex": 8,
            "level": "note",
            "message": {
              "text": "Calling extractall to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
              "markdown": "Calling {0} to extract all files from a tar file without sanitization. This may result files outside destination directory to be overwritten, resulting in an arbitrary file write.",
              "arguments": [
                "[extractall](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/integration/api/test_artifact_evidence_file.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 92,
                    "endLine": 92,
                    "startColumn": 5,
                    "endColumn": 20
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "ff8efb493b4a95cf346ce7055cb72314a07581135687351454ca810e03c66e62",
              "1": "77f9dd0a.755ecede.b19066ef.139c59a8.9e940ef6.addfbd48.c016564f.f72ce814.a0ac1176.755ecede.b19066ef.139c59a8.3f5ff851.addfbd48.c016564f.f72ce814"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/integration/api/test_artifact_evidence_file.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 92,
                              "endLine": 92,
                              "startColumn": 5,
                              "endColumn": 20
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 153,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/NoHardcodedCredentials",
            "ruleIndex": 9,
            "level": "note",
            "message": {
              "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
              "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
              "arguments": [
                "[hardcoded](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "demo/init/create_azure_admin.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 47,
                    "endLine": 47,
                    "startColumn": 5,
                    "endColumn": 12
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "bab7f735d6d26d66f9a129b0dd773457d4dda62d27fb00fe0a38c3d50278f9c7",
              "1": "774a92a4.4b2c6fd9.79e62dc9.dcee323f.f1af2a92.8e9adeed.1353314b.b458ff22.774a92a4.4b2c6fd9.79e62dc9.dcee323f.f1af2a92.8e9adeed.1353314b.b458ff22"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "demo/init/create_azure_admin.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 15,
                              "endColumn": 53
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 362,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/NoHardcodedCredentials",
            "ruleIndex": 9,
            "level": "note",
            "message": {
              "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
              "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
              "arguments": [
                "[hardcoded](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "demo/init/create_azure_member.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 52,
                    "endLine": 52,
                    "startColumn": 5,
                    "endColumn": 12
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "dd7155cbc5ab834642773fd85758c64d3415bd5c3b288667a27244e7414d3f7c",
              "1": "774a92a4.4b2c6fd9.79e62dc9.dcee323f.f1af2a92.8e9adeed.1353314b.b458ff22.774a92a4.4b2c6fd9.79e62dc9.dcee323f.f1af2a92.8e9adeed.1353314b.b458ff22"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "demo/init/create_azure_member.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 52,
                              "endLine": 52,
                              "startColumn": 15,
                              "endColumn": 53
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 362,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/NoHardcodedCredentials",
            "ruleIndex": 9,
            "level": "note",
            "message": {
              "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
              "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
              "arguments": [
                "[hardcoded](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/performance/env_snapshot_create_flattened.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 2123,
                    "endLine": 2123,
                    "startColumn": 1,
                    "endColumn": 8
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "dd28cf0f26cd9456d490478c05d720f161cc0b1088b0eba2110530ce77f0b766",
              "1": "85e7ff9c.ed881349.79e62dc9.98569367.e1694b7b.47524276.081ac3f4.c2729f9c.85e7ff9c.ed881349.79e62dc9.98569367.e1694b7b.47524276.081ac3f4.c2729f9c"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/performance/env_snapshot_create_flattened.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 2123,
                              "endLine": 2123,
                              "startColumn": 11,
                              "endColumn": 45
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 362,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/NoHardcodedCredentials",
            "ruleIndex": 9,
            "level": "note",
            "message": {
              "text": "Do not hardcode credentials in code. Found hardcoded credential used in here.",
              "markdown": "Do not hardcode credentials in code. Found {0} credential used in here.",
              "arguments": [
                "[hardcoded](0)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/performance/env_snapshot_simulate_report.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 2123,
                    "endLine": 2123,
                    "startColumn": 1,
                    "endColumn": 8
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "99b0f76c2d50dd4cf5d5ee215b2dbf9c8be903a014ca45b6c816a0969c377f77",
              "1": "85e7ff9c.ed881349.79e62dc9.98569367.e1694b7b.47524276.081ac3f4.c2729f9c.85e7ff9c.ed881349.79e62dc9.98569367.e1694b7b.47524276.081ac3f4.c2729f9c"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "src/performance/env_snapshot_simulate_report.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 2123,
                              "endLine": 2123,
                              "startColumn": 11,
                              "endColumn": 45
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 362,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileCodeFlow"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          }
        ],
        "properties": {
          "coverage": [
            {
              "isSupported": true,
              "lang": "HTML",
              "files": 43,
              "type": "SUPPORTED"
            },
            {
              "isSupported": true,
              "lang": "XML",
              "files": 1,
              "type": "SUPPORTED"
            },
            {
              "isSupported": true,
              "lang": "Python",
              "files": 714,
              "type": "SUPPORTED"
            },
            {
              "isSupported": true,
              "lang": "JavaScript",
              "files": 11,
              "type": "SUPPORTED"
            },
            {
              "isSupported": false,
              "lang": "HTML",
              "files": 51,
              "type": "FAILED_PARSING"
            }
          ]
        }
      }
    ]
  }
  