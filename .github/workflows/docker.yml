name: Docker

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      platforms:
        required: true
        type: string
    secrets:
      slack_channel:
        required: true
      slack_webhook:
        required: true
      ghcr_user:
        required: true
      ghcr_token: 
        required: true         
      kosli_api_token:
        required: true
      snyk_token:
        required: true         


env:
  IMAGE: ghcr.io/kosli-dev/cli
  KOSLI_CLI_VERSION: "2.6.18"
  # KOSLI_DRY_RUN: "True"
  # Ordinarily we declare KOSLI_ORG and KOSLI_FLOW here but
  # this interferes with the CLI integration tests


jobs:  
  docker:
    name: Docker Build
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
      contents: write
      pull-requests: read
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 3

    - uses: actions/setup-go@v3
      with:
        go-version: '1.21.2'

    # Set up QEMU emulator to allow building multi-arch images
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    # This is the a separate action that sets up buildx (buildkit) runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.ghcr_user }}
        password: ${{ secrets.ghcr_token }}  

    # Push image to the GHCR 
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE }}:${{ inputs.tag }}
        platforms: ${{ inputs.platforms }}
        cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max    


    - name: Make the image fingerprint available for following steps
      run: |
        ARTIFACT_SHA=$( echo ${{ steps.docker_build.outputs.digest }} | sed 's/.*://')
        echo "FINGERPRINT=$ARTIFACT_SHA" >> ${GITHUB_ENV}


    - name: setup-kosli-cli
      uses: kosli-dev/setup-cli-action@v2
      with:
        version:
          ${{ env.KOSLI_CLI_VERSION }}

    
    - name: setup Snyk
      uses: snyk/actions/setup@master


    - name: Create Kosli flow
      env:
        KOSLI_API_TOKEN: ${{ secrets.kosli_api_token }}
        KOSLI_ORG: kosli
      run: 
        kosli create flow cli
          --description "Kosli CLI" 
          --template "artifact,snyk-code-scan,snyk-docker-scan,smoke-test,pull-request"


    - name: Report Docker image to Kosli
      env:
        KOSLI_API_TOKEN: ${{ secrets.kosli_api_token }}
        KOSLI_ORG: kosli
      run: 
        kosli report artifact
           ${{ env.IMAGE }}:${{ inputs.tag }}
           --fingerprint=${{ env.FINGERPRINT }}
           --flow cli


    - name: Run Snyk to check source code for vulnerabilities
      continue-on-error: true
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.snyk_token }}
      run: 
          snyk test --json-file-output=snyk-code.json --prune-repeated-subdependencies


    - name: Report Snyk CODE scan results evidence to Kosli
      env:
        KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
        KOSLI_ORG: kosli
      run: 
        kosli report evidence artifact snyk 
          ${{ env.IMAGE }}:${{ inputs.tag }}
            --fingerprint ${{ env.FINGERPRINT }}
            --name snyk-code-scan
            --scan-results snyk-code.json
            --flow cli

    
    - name: Run Snyk to scan the Docker image for vulnerabilities
      continue-on-error: true
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.snyk_token }}
      run: 
          snyk container test ${{ env.IMAGE }}:${{ inputs.tag }} 
             --file=Dockerfile 
             --json-file-output=snyk-docker.json


    - name: Report Snyk Docker scan results evidence to Kosli
      env:
        KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
        KOSLI_ORG: kosli
      run: 
        kosli report evidence artifact snyk 
          ${{ env.IMAGE }}:${{ inputs.tag }}
            --fingerprint ${{ env.FINGERPRINT }}
            --name snyk-docker-scan
            --scan-results snyk-docker.json
            --flow cli

    - name: Smoke test the docker image to be sure it can connect to Kosli
      id: smoke-test
      continue-on-error: true
      env:
        KOSLI_ORG: cyber-dojo
        KOSLI_API_TOKEN: any-token-will-do
      run: 
        docker run -e KOSLI_API_TOKEN
          -e KOSLI_ORG --rm ${{ env.IMAGE }}:${{ inputs.tag }}
          list environments

    - name: Report Docker smoke test evidence to Kosli
      env:
        KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
        KOSLI_ORG: kosli
        SMOKE_TEST_OUTCOME: ${{ steps.smoke-test.outcome}}
      run: |
        if [ $SMOKE_TEST_OUTCOME = success ]
        then
          export SMOKE_TEST_PASSED=true
        else
          export SMOKE_TEST_PASSED=false
        fi

        kosli report evidence artifact generic \
          ${{ env.IMAGE }}:${{ inputs.tag }} \
            --fingerprint ${{ env.FINGERPRINT }} \
            --name smoke-test \
            --compliant=$SMOKE_TEST_PASSED \
            --flow cli

    - name: Report pull-request evidence to Kosli (production)
      env:
        KOSLI_NAME: "pull-request"
        KOSLI_FINGERPRINT: ${{ env.FINGERPRINT }} 
        KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
        KOSLI_ORG: kosli
        KOSLI_FLOW: cli
      run:
        kosli report evidence artifact pullrequest github
          --github-token ${{ secrets.GITHUB_TOKEN }}
